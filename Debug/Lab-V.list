
Lab-V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004640  08004640  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004640  08004640  00014640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000007c  080046c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080046c4  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d73  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172c  00000000  00000000  00028e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c66  00000000  00000000  00040c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e0c  00000000  00000000  000498a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf6ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f50  00000000  00000000  000cf700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004550 	.word	0x08004550

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004550 	.word	0x08004550

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc65 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f843 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f8fd 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a6:	f000 f8d3 	bl	8000750 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f8a7 	bl	80006fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t text[] = "Menu\r\n"
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <main+0x84>)
 80005b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005be:	e884 0003 	stmia.w	r4, {r0, r1}
		  	  	   "0:LED\r\n"
		  	  	   "1:Button\r\n";
  uint8_t led_option[55] = "a:Speed Up +1Hz\r\n"
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0x88>)
 80005c4:	463c      	mov	r4, r7
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d8:	6020      	str	r0, [r4, #0]
 80005da:	3404      	adds	r4, #4
 80005dc:	8021      	strh	r1, [r4, #0]
 80005de:	3402      	adds	r4, #2
 80005e0:	0c0b      	lsrs	r3, r1, #16
 80005e2:	7023      	strb	r3, [r4, #0]
					   	 "s:Speed Down -1Hz\r\n"
		  	  	  	  	 "d:On/Off\r\n"
		  	  	  	  	 "x:Back\r\n";

  HAL_UART_Transmit(&huart2, text, 24, HAL_MAX_DELAY);
 80005e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2218      	movs	r2, #24
 80005ee:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0x8c>)
 80005f0:	f002 f875 	bl	80026de <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  UARTDMA();
 80005f4:	f000 f974 	bl	80008e0 <UARTDMA>
	  LEDMenu();
 80005f8:	f000 f940 	bl	800087c <LEDMenu>
	  switch(state)
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x90>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <main+0x76>
 8000604:	2b01      	cmp	r3, #1
 8000606:	d003      	beq.n	8000610 <main+0x7c>
 8000608:	e005      	b.n	8000616 <main+0x82>
	  {
	  case 0: // led-options
		  LED_Control();
 800060a:	f000 f9d9 	bl	80009c0 <LED_Control>
		  break;
 800060e:	e002      	b.n	8000616 <main+0x82>
	  case 1: // botton-status
		  Button_Status();
 8000610:	f000 fa52 	bl	8000ab8 <Button_Status>
		  break;
 8000614:	bf00      	nop
	  UARTDMA();
 8000616:	e7ed      	b.n	80005f4 <main+0x60>
 8000618:	08004568 	.word	0x08004568
 800061c:	08004580 	.word	0x08004580
 8000620:	20000098 	.word	0x20000098
 8000624:	20000008 	.word	0x20000008

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fb14 	bl	8003c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fb30 	bl	8001d14 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ba:	f000 fa37 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fd92 	bl	8002204 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 fa21 	bl	8000b2c <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART2_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART2_UART_Init+0x4c>)
 8000734:	f001 ff86 	bl	8002644 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f9f5 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000098 	.word	0x20000098
 800074c:	40004400 	.word	0x40004400

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_DMA_Init+0x4c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MX_DMA_Init+0x4c>)
 8000760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_DMA_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2010      	movs	r0, #16
 8000778:	f000 fcc3 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800077c:	2010      	movs	r0, #16
 800077e:	f000 fcdc 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2011      	movs	r0, #17
 8000788:	f000 fcbb 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800078c:	2011      	movs	r0, #17
 800078e:	f000 fcd4 	bl	800113a <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2c      	ldr	r2, [pc, #176]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a25      	ldr	r2, [pc, #148]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	4812      	ldr	r0, [pc, #72]	; (8000874 <MX_GPIO_Init+0xd4>)
 800082c:	f001 fa3e 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000836:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0xd8>)
 8000848:	f001 f894 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_GPIO_Init+0xd4>)
 8000864:	f001 f886 	bl	8001974 <HAL_GPIO_Init>

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000
 8000878:	40020800 	.word	0x40020800

0800087c <LEDMenu>:

/* USER CODE BEGIN 4 */
void LEDMenu()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick() >= timestamp)
 8000880:	f000 fb58 	bl	8000f34 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <LEDMenu+0x54>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	429a      	cmp	r2, r3
 800088c:	d31d      	bcc.n	80008ca <LEDMenu+0x4e>
	{

		timestamp = HAL_GetTick() + (1000/F);
 800088e:	f000 fb51 	bl	8000f34 <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <LEDMenu+0x58>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800089c:	fb91 f3f3 	sdiv	r3, r1, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LEDMenu+0x54>)
 80008a4:	6013      	str	r3, [r2, #0]

		switch(led_s)
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <LEDMenu+0x5c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <LEDMenu+0x38>
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d006      	beq.n	80008c0 <LEDMenu+0x44>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			break;
		}
	}

}
 80008b2:	e00b      	b.n	80008cc <LEDMenu+0x50>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <LEDMenu+0x60>)
 80008ba:	f001 f9f7 	bl	8001cac <HAL_GPIO_WritePin>
			break;
 80008be:	e005      	b.n	80008cc <LEDMenu+0x50>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008c0:	2120      	movs	r1, #32
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <LEDMenu+0x60>)
 80008c4:	f001 fa0b 	bl	8001cde <HAL_GPIO_TogglePin>
			break;
 80008c8:	e000      	b.n	80008cc <LEDMenu+0x50>
	}
 80008ca:	bf00      	nop
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000288 	.word	0x20000288
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000004 	.word	0x20000004
 80008dc:	40020000 	.word	0x40020000

080008e0 <UARTDMA>:
void UARTDMA()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	4903      	ldr	r1, [pc, #12]	; (80008f4 <UARTDMA+0x14>)
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <UARTDMA+0x18>)
 80008ea:	f002 f809 	bl	8002900 <HAL_UART_Receive_DMA>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000019c 	.word	0x2000019c
 80008f8:	20000098 	.word	0x20000098

080008fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <HAL_UART_RxCpltCallback+0xa4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d111      	bne.n	8000930 <HAL_UART_RxCpltCallback+0x34>
	{
		RxBuffer[1] = '\0';
 800090c:	4b25      	ldr	r3, [pc, #148]	; (80009a4 <HAL_UART_RxCpltCallback+0xa8>)
 800090e:	2200      	movs	r2, #0
 8000910:	705a      	strb	r2, [r3, #1]

		sprintf((char*)TxBuffer, "Received : %s\r\n", RxBuffer);
 8000912:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <HAL_UART_RxCpltCallback+0xa8>)
 8000914:	4924      	ldr	r1, [pc, #144]	; (80009a8 <HAL_UART_RxCpltCallback+0xac>)
 8000916:	4825      	ldr	r0, [pc, #148]	; (80009ac <HAL_UART_RxCpltCallback+0xb0>)
 8000918:	f003 f9ac 	bl	8003c74 <siprintf>
		HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 800091c:	4823      	ldr	r0, [pc, #140]	; (80009ac <HAL_UART_RxCpltCallback+0xb0>)
 800091e:	f7ff fc5f 	bl	80001e0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	b29b      	uxth	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	4920      	ldr	r1, [pc, #128]	; (80009ac <HAL_UART_RxCpltCallback+0xb0>)
 800092a:	481d      	ldr	r0, [pc, #116]	; (80009a0 <HAL_UART_RxCpltCallback+0xa4>)
 800092c:	f001 ff6a 	bl	8002804 <HAL_UART_Transmit_DMA>
	}

	x = RxBuffer[0];
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_UART_RxCpltCallback+0xa8>)
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_UART_RxCpltCallback+0xb4>)
 8000936:	701a      	strb	r2, [r3, #0]
	if(state == 2)
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <HAL_UART_RxCpltCallback+0xb8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d12a      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x9a>
	{
		if(RxBuffer[0] == '0')
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_RxCpltCallback+0xa8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b30      	cmp	r3, #48	; 0x30
 8000946:	d111      	bne.n	800096c <HAL_UART_RxCpltCallback+0x70>
		{
			state = 0;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_UART_RxCpltCallback+0xb8>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]

			sprintf((char*)TxBuffer, "a:Speed Up +1Hz\r\n"
 800094e:	491a      	ldr	r1, [pc, #104]	; (80009b8 <HAL_UART_RxCpltCallback+0xbc>)
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <HAL_UART_RxCpltCallback+0xb0>)
 8000952:	f003 f98f 	bl	8003c74 <siprintf>
		  	  	  	   	   	   	     "s:Speed Down -1Hz\r\n"
									 "d:On/Off\r\n"
		  	  	  	   	   	   	     "x:Back\r\n");
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000956:	4815      	ldr	r0, [pc, #84]	; (80009ac <HAL_UART_RxCpltCallback+0xb0>)
 8000958:	f7ff fc42 	bl	80001e0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	4912      	ldr	r1, [pc, #72]	; (80009ac <HAL_UART_RxCpltCallback+0xb0>)
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <HAL_UART_RxCpltCallback+0xa4>)
 8000966:	f001 ff4d 	bl	8002804 <HAL_UART_Transmit_DMA>
			uint8_t button_option[] = "x:Back\r\n";

			HAL_UART_Transmit(&huart2, button_option, 9, 1000);
		}
	}
}
 800096a:	e014      	b.n	8000996 <HAL_UART_RxCpltCallback+0x9a>
		else if(RxBuffer[0] == '1')
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_UART_RxCpltCallback+0xa8>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b31      	cmp	r3, #49	; 0x31
 8000972:	d110      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x9a>
			state = 1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_UART_RxCpltCallback+0xb8>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
			uint8_t button_option[] = "x:Back\r\n";
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_RxCpltCallback+0xc0>)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	ca07      	ldmia	r2, {r0, r1, r2}
 8000982:	c303      	stmia	r3!, {r0, r1}
 8000984:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, button_option, 9, 1000);
 8000986:	f107 010c 	add.w	r1, r7, #12
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	2209      	movs	r2, #9
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <HAL_UART_RxCpltCallback+0xa4>)
 8000992:	f001 fea4 	bl	80026de <HAL_UART_Transmit>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000098 	.word	0x20000098
 80009a4:	2000019c 	.word	0x2000019c
 80009a8:	080045b8 	.word	0x080045b8
 80009ac:	200001b0 	.word	0x200001b0
 80009b0:	20000280 	.word	0x20000280
 80009b4:	20000008 	.word	0x20000008
 80009b8:	08004580 	.word	0x08004580
 80009bc:	080045c8 	.word	0x080045c8

080009c0 <LED_Control>:
void LED_Control()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	C_Button = 0;
 80009c4:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <LED_Control+0xd4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
	if((x == 97 || x == 115 || x == 100 || x == 120) && L_Button == 0)
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <LED_Control+0xd8>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b61      	cmp	r3, #97	; 0x61
 80009d0:	d00b      	beq.n	80009ea <LED_Control+0x2a>
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <LED_Control+0xd8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b73      	cmp	r3, #115	; 0x73
 80009d8:	d007      	beq.n	80009ea <LED_Control+0x2a>
 80009da:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <LED_Control+0xd8>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b64      	cmp	r3, #100	; 0x64
 80009e0:	d003      	beq.n	80009ea <LED_Control+0x2a>
 80009e2:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <LED_Control+0xd8>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b78      	cmp	r3, #120	; 0x78
 80009e8:	d14a      	bne.n	8000a80 <LED_Control+0xc0>
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <LED_Control+0xdc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d146      	bne.n	8000a80 <LED_Control+0xc0>
	{
		C_Button = 1;
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <LED_Control+0xd4>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
		if(x == 97)//a
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <LED_Control+0xd8>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b61      	cmp	r3, #97	; 0x61
 80009fe:	d116      	bne.n	8000a2e <LED_Control+0x6e>
		{
			F++;
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <LED_Control+0xe0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a26      	ldr	r2, [pc, #152]	; (8000aa0 <LED_Control+0xe0>)
 8000a08:	6013      	str	r3, [r2, #0]
			sprintf((char*)TxBuffer, "Freq  = %d\r\n", F);
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <LED_Control+0xe0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4924      	ldr	r1, [pc, #144]	; (8000aa4 <LED_Control+0xe4>)
 8000a12:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <LED_Control+0xe8>)
 8000a14:	f003 f92e 	bl	8003c74 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a18:	4823      	ldr	r0, [pc, #140]	; (8000aa8 <LED_Control+0xe8>)
 8000a1a:	f7ff fbe1 	bl	80001e0 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4920      	ldr	r1, [pc, #128]	; (8000aa8 <LED_Control+0xe8>)
 8000a26:	4821      	ldr	r0, [pc, #132]	; (8000aac <LED_Control+0xec>)
 8000a28:	f001 feec 	bl	8002804 <HAL_UART_Transmit_DMA>
 8000a2c:	e028      	b.n	8000a80 <LED_Control+0xc0>
		}
		else if(x == 115)//s
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <LED_Control+0xd8>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b73      	cmp	r3, #115	; 0x73
 8000a34:	d105      	bne.n	8000a42 <LED_Control+0x82>
		{
			F--;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <LED_Control+0xe0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <LED_Control+0xe0>)
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e01e      	b.n	8000a80 <LED_Control+0xc0>
		}
		else if(x == 120)//x
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <LED_Control+0xd8>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b78      	cmp	r3, #120	; 0x78
 8000a48:	d103      	bne.n	8000a52 <LED_Control+0x92>
		{
			state = 2;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <LED_Control+0xf0>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e016      	b.n	8000a80 <LED_Control+0xc0>
		}
		else if(x == 100 && led_s == 1)//d Off
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <LED_Control+0xd8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b64      	cmp	r3, #100	; 0x64
 8000a58:	d107      	bne.n	8000a6a <LED_Control+0xaa>
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <LED_Control+0xf4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d103      	bne.n	8000a6a <LED_Control+0xaa>
		{
			led_s = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <LED_Control+0xf4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	e00a      	b.n	8000a80 <LED_Control+0xc0>

		}
		else if(x == 100 && led_s == 0)//d On
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LED_Control+0xd8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b64      	cmp	r3, #100	; 0x64
 8000a70:	d106      	bne.n	8000a80 <LED_Control+0xc0>
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <LED_Control+0xf4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <LED_Control+0xc0>
		{
			led_s = 1;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <LED_Control+0xf4>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]

		}
	}
	x = 0;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <LED_Control+0xd8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
	L_Button = C_Button;
 8000a86:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <LED_Control+0xd4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <LED_Control+0xdc>)
 8000a8c:	6013      	str	r3, [r2, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000278 	.word	0x20000278
 8000a98:	20000280 	.word	0x20000280
 8000a9c:	2000027c 	.word	0x2000027c
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	080045d4 	.word	0x080045d4
 8000aa8:	200001b0 	.word	0x200001b0
 8000aac:	20000098 	.word	0x20000098
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <Button_Status>:

void Button_Status()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	C_Button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4814      	ldr	r0, [pc, #80]	; (8000b14 <Button_Status+0x5c>)
 8000ac2:	f001 f8db 	bl	8001c7c <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <Button_Status+0x60>)
 8000acc:	601a      	str	r2, [r3, #0]
	if(C_Button != L_Button)
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <Button_Status+0x60>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <Button_Status+0x64>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d016      	beq.n	8000b08 <Button_Status+0x50>
	{
		if(C_Button == 0) //Press
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <Button_Status+0x60>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <Button_Status+0x32>
		{
			press = 1;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <Button_Status+0x68>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e00e      	b.n	8000b08 <Button_Status+0x50>
		}
		else if(C_Button == 1) // Unpress
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <Button_Status+0x60>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d103      	bne.n	8000afa <Button_Status+0x42>
		{
			press = 0;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <Button_Status+0x68>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e006      	b.n	8000b08 <Button_Status+0x50>
		}
		else if(x == 120) //back
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <Button_Status+0x6c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b78      	cmp	r3, #120	; 0x78
 8000b00:	d102      	bne.n	8000b08 <Button_Status+0x50>
		{
			state = 2;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <Button_Status+0x70>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	601a      	str	r2, [r3, #0]
		}
	}
	L_Button = C_Button;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <Button_Status+0x60>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <Button_Status+0x64>)
 8000b0e:	6013      	str	r3, [r2, #0]

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40020800 	.word	0x40020800
 8000b18:	20000278 	.word	0x20000278
 8000b1c:	2000027c 	.word	0x2000027c
 8000b20:	20000284 	.word	0x20000284
 8000b24:	20000280 	.word	0x20000280
 8000b28:	20000008 	.word	0x20000008

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 fab8 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a4c      	ldr	r2, [pc, #304]	; (8000cd8 <HAL_UART_MspInit+0x150>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	f040 8091 	bne.w	8000cce <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <HAL_UART_MspInit+0x154>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a49      	ldr	r2, [pc, #292]	; (8000cdc <HAL_UART_MspInit+0x154>)
 8000bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <HAL_UART_MspInit+0x154>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4b43      	ldr	r3, [pc, #268]	; (8000cdc <HAL_UART_MspInit+0x154>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a42      	ldr	r2, [pc, #264]	; (8000cdc <HAL_UART_MspInit+0x154>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd8:	4b40      	ldr	r3, [pc, #256]	; (8000cdc <HAL_UART_MspInit+0x154>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be4:	230c      	movs	r3, #12
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4838      	ldr	r0, [pc, #224]	; (8000ce0 <HAL_UART_MspInit+0x158>)
 8000c00:	f000 feb8 	bl	8001974 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c04:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c06:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <HAL_UART_MspInit+0x160>)
 8000c08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c38:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c46:	4827      	ldr	r0, [pc, #156]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c48:	f000 fa92 	bl	8001170 <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c52:	f7ff ff6b 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_UART_MspInit+0x15c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_UART_MspInit+0x168>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c72:	2240      	movs	r2, #64	; 0x40
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ca2:	4812      	ldr	r0, [pc, #72]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000ca4:	f000 fa64 	bl	8001170 <HAL_DMA_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000cae:	f7ff ff3d 	bl	8000b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_UART_MspInit+0x164>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2026      	movs	r0, #38	; 0x26
 8000cc4:	f000 fa1d 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc8:	2026      	movs	r0, #38	; 0x26
 8000cca:	f000 fa36 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	200000dc 	.word	0x200000dc
 8000ce8:	40026088 	.word	0x40026088
 8000cec:	2000013c 	.word	0x2000013c
 8000cf0:	400260a0 	.word	0x400260a0

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f8e4 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <DMA1_Stream5_IRQHandler+0x10>)
 8000d4e:	f000 fba7 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000dc 	.word	0x200000dc

08000d5c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <DMA1_Stream6_IRQHandler+0x10>)
 8000d62:	f000 fb9d 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000013c 	.word	0x2000013c

08000d70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <USART2_IRQHandler+0x10>)
 8000d76:	f001 fdf3 	bl	8002960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000098 	.word	0x20000098

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f002 ff2c 	bl	8003c10 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	2000028c 	.word	0x2000028c
 8000dec:	200002a8 	.word	0x200002a8

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1a:	490e      	ldr	r1, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e30:	4c0b      	ldr	r4, [pc, #44]	; (8000e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3e:	f7ff ffd7 	bl	8000df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f002 feeb 	bl	8003c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fba5 	bl	8000594 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e58:	08004648 	.word	0x08004648
  ldr r2, =_sbss
 8000e5c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e60:	200002a4 	.word	0x200002a4

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f92b 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe4c 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f943 	bl	8001156 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 f90b 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	20000014 	.word	0x20000014
 8000f08:	20000010 	.word	0x20000010

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000014 	.word	0x20000014
 8000f30:	20000290 	.word	0x20000290

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000290 	.word	0x20000290

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff feda 	bl	8000f34 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e099      	b.n	80012c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e00f      	b.n	80011ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fec1 	bl	8000f34 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d908      	bls.n	80011ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e078      	b.n	80012c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e8      	bne.n	80011ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_DMA_Init+0x158>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	2b04      	cmp	r3, #4
 8001226:	d107      	bne.n	8001238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4313      	orrs	r3, r2
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f023 0307 	bic.w	r3, r3, #7
 800124e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	2b04      	cmp	r3, #4
 8001260:	d117      	bne.n	8001292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fb01 	bl	800187c <DMA_CheckFifoParam>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800128e:	2301      	movs	r3, #1
 8001290:	e016      	b.n	80012c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fab8 	bl	8001810 <DMA_CalcBaseAndBitshift>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	f010803f 	.word	0xf010803f

080012cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Start_IT+0x26>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e040      	b.n	8001374 <HAL_DMA_Start_IT+0xa8>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d12f      	bne.n	8001366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 fa4a 	bl	80017b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	223f      	movs	r2, #63	; 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0216 	orr.w	r2, r2, #22
 800133a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e005      	b.n	8001372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800136e:	2302      	movs	r3, #2
 8001370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001372:	7dfb      	ldrb	r3, [r7, #23]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800138a:	f7ff fdd3 	bl	8000f34 <HAL_GetTick>
 800138e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d008      	beq.n	80013ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e052      	b.n	8001454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0216 	bic.w	r2, r2, #22
 80013bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <HAL_DMA_Abort+0x62>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0208 	bic.w	r2, r2, #8
 80013ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fe:	e013      	b.n	8001428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001400:	f7ff fd98 	bl	8000f34 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b05      	cmp	r3, #5
 800140c:	d90c      	bls.n	8001428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2220      	movs	r2, #32
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2203      	movs	r2, #3
 8001418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e015      	b.n	8001454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1e4      	bne.n	8001400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	223f      	movs	r2, #63	; 0x3f
 800143c:	409a      	lsls	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d004      	beq.n	800147a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00c      	b.n	8001494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2205      	movs	r2, #5
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014ac:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <HAL_DMA_IRQHandler+0x248>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a8e      	ldr	r2, [pc, #568]	; (80016ec <HAL_DMA_IRQHandler+0x24c>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0a9b      	lsrs	r3, r3, #10
 80014b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ca:	2208      	movs	r2, #8
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d01a      	beq.n	800150c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0204 	bic.w	r2, r2, #4
 80014f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2208      	movs	r2, #8
 80014fa:	409a      	lsls	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	2201      	movs	r2, #1
 8001512:	409a      	lsls	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d012      	beq.n	8001542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	2201      	movs	r2, #1
 8001530:	409a      	lsls	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153a:	f043 0202 	orr.w	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2204      	movs	r2, #4
 8001548:	409a      	lsls	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d012      	beq.n	8001578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00b      	beq.n	8001578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	2204      	movs	r2, #4
 8001566:	409a      	lsls	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	f043 0204 	orr.w	r2, r3, #4
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	2210      	movs	r2, #16
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d043      	beq.n	8001610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d03c      	beq.n	8001610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2210      	movs	r2, #16
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d018      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d108      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d024      	beq.n	8001610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
 80015ce:	e01f      	b.n	8001610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01b      	beq.n	8001610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	4798      	blx	r3
 80015e0:	e016      	b.n	8001610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0208 	bic.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2220      	movs	r2, #32
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 808f 	beq.w	8001740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 8087 	beq.w	8001740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	2220      	movs	r2, #32
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b05      	cmp	r3, #5
 8001648:	d136      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0216 	bic.w	r2, r2, #22
 8001658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_DMA_IRQHandler+0x1da>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168e:	223f      	movs	r2, #63	; 0x3f
 8001690:	409a      	lsls	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d07e      	beq.n	80017ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4798      	blx	r3
        }
        return;
 80016b6:	e079      	b.n	80017ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01d      	beq.n	8001702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10d      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d031      	beq.n	8001740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
 80016e4:	e02c      	b.n	8001740 <HAL_DMA_IRQHandler+0x2a0>
 80016e6:	bf00      	nop
 80016e8:	2000000c 	.word	0x2000000c
 80016ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d023      	beq.n	8001740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
 8001700:	e01e      	b.n	8001740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0210 	bic.w	r2, r2, #16
 800171e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001744:	2b00      	cmp	r3, #0
 8001746:	d032      	beq.n	80017ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d022      	beq.n	800179a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2205      	movs	r2, #5
 8001758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3301      	adds	r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	d307      	bcc.n	8001788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f2      	bne.n	800176c <HAL_DMA_IRQHandler+0x2cc>
 8001786:	e000      	b.n	800178a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	4798      	blx	r3
 80017aa:	e000      	b.n	80017ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80017ac:	bf00      	nop
    }
  }
}
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d108      	bne.n	80017f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017f2:	e007      	b.n	8001804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	60da      	str	r2, [r3, #12]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	3b10      	subs	r3, #16
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <DMA_CalcBaseAndBitshift+0x64>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <DMA_CalcBaseAndBitshift+0x68>)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d909      	bls.n	8001852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001846:	f023 0303 	bic.w	r3, r3, #3
 800184a:	1d1a      	adds	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	659a      	str	r2, [r3, #88]	; 0x58
 8001850:	e007      	b.n	8001862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	aaaaaaab 	.word	0xaaaaaaab
 8001878:	080045fc 	.word	0x080045fc

0800187c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d11f      	bne.n	80018d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d856      	bhi.n	800194a <DMA_CheckFifoParam+0xce>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <DMA_CheckFifoParam+0x28>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018c7 	.word	0x080018c7
 80018ac:	080018b5 	.word	0x080018b5
 80018b0:	0800194b 	.word	0x0800194b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d046      	beq.n	800194e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c4:	e043      	b.n	800194e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018ce:	d140      	bne.n	8001952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d4:	e03d      	b.n	8001952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018de:	d121      	bne.n	8001924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d837      	bhi.n	8001956 <DMA_CheckFifoParam+0xda>
 80018e6:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <DMA_CheckFifoParam+0x70>)
 80018e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	08001903 	.word	0x08001903
 80018f4:	080018fd 	.word	0x080018fd
 80018f8:	08001915 	.word	0x08001915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001900:	e030      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d025      	beq.n	800195a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001912:	e022      	b.n	800195a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800191c:	d11f      	bne.n	800195e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001922:	e01c      	b.n	800195e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d903      	bls.n	8001932 <DMA_CheckFifoParam+0xb6>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d003      	beq.n	8001938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001930:	e018      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
      break;
 8001936:	e015      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00e      	beq.n	8001962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
      break;
 8001948:	e00b      	b.n	8001962 <DMA_CheckFifoParam+0xe6>
      break;
 800194a:	bf00      	nop
 800194c:	e00a      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      break;
 800194e:	bf00      	nop
 8001950:	e008      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      break;
 8001952:	bf00      	nop
 8001954:	e006      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      break;
 8001956:	bf00      	nop
 8001958:	e004      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      break;
 800195a:	bf00      	nop
 800195c:	e002      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      break;   
 800195e:	bf00      	nop
 8001960:	e000      	b.n	8001964 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
    }
  } 
  
  return status; 
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	e159      	b.n	8001c44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 8148 	bne.w	8001c3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d005      	beq.n	80019c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d130      	bne.n	8001a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 0201 	and.w	r2, r3, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d017      	beq.n	8001a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	69b9      	ldr	r1, [r7, #24]
 8001ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a2 	beq.w	8001c3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_GPIO_Init+0x2e8>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <HAL_GPIO_Init+0x2e8>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <HAL_GPIO_Init+0x2e8>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b16:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x202>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <HAL_GPIO_Init+0x2f4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x1fe>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a47      	ldr	r2, [pc, #284]	; (8001c6c <HAL_GPIO_Init+0x2f8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x1fa>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a46      	ldr	r2, [pc, #280]	; (8001c70 <HAL_GPIO_Init+0x2fc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x1f6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a45      	ldr	r2, [pc, #276]	; (8001c74 <HAL_GPIO_Init+0x300>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x1f2>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e008      	b.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b66:	2307      	movs	r3, #7
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b76:	2300      	movs	r3, #0
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f002 0203 	and.w	r2, r2, #3
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b88:	4935      	ldr	r1, [pc, #212]	; (8001c60 <HAL_GPIO_Init+0x2ec>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bba:	4a2f      	ldr	r2, [pc, #188]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be4:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c38:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	f67f aea2 	bls.w	8001990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40013c00 	.word	0x40013c00

08001c7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e001      	b.n	8001c9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	400b      	ands	r3, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e267      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d075      	beq.n	8001e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d00c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b85      	ldr	r3, [pc, #532]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d112      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d56:	d10b      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d05b      	beq.n	8001e1c <HAL_RCC_OscConfig+0x108>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d157      	bne.n	8001e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e242      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x74>
 8001d7a:	4b76      	ldr	r3, [pc, #472]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a75      	ldr	r2, [pc, #468]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e01d      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x98>
 8001d92:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6f      	ldr	r2, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6c      	ldr	r2, [pc, #432]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb0>
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a68      	ldr	r2, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a65      	ldr	r2, [pc, #404]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f8b2 	bl	8000f34 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f8ae 	bl	8000f34 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e207      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0xc0>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff f89e 	bl	8000f34 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f89a 	bl	8000f34 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1f3      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0xe8>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d11c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d116      	bne.n	8001e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e1c7      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4937      	ldr	r1, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7a:	e03a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e84:	4b34      	ldr	r3, [pc, #208]	; (8001f58 <HAL_RCC_OscConfig+0x244>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f853 	bl	8000f34 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff f84f 	bl	8000f34 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e1a8      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4925      	ldr	r1, [pc, #148]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_RCC_OscConfig+0x244>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f832 	bl	8000f34 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f82e 	bl	8000f34 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e187      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d036      	beq.n	8001f6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_RCC_OscConfig+0x248>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f812 	bl	8000f34 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff f80e 	bl	8000f34 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e167      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x240>)
 8001f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x200>
 8001f32:	e01b      	b.n	8001f6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_OscConfig+0x248>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fffb 	bl	8000f34 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe fff7 	bl	8000f34 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d907      	bls.n	8001f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e150      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	42470000 	.word	0x42470000
 8001f5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ea      	bne.n	8001f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8097 	beq.w	80020a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b7d      	ldr	r3, [pc, #500]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a7c      	ldr	r2, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b77      	ldr	r3, [pc, #476]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d118      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b74      	ldr	r3, [pc, #464]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a73      	ldr	r2, [pc, #460]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe ffb7 	bl	8000f34 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f7fe ffb3 	bl	8000f34 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e10c      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <HAL_RCC_OscConfig+0x474>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x2ea>
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	e01c      	b.n	8002038 <HAL_RCC_OscConfig+0x324>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x30c>
 8002006:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a5b      	ldr	r2, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0x324>
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe ff78 	bl	8000f34 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe ff74 	bl	8000f34 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0cb      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCC_OscConfig+0x334>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7fe ff62 	bl	8000f34 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	e00a      	b.n	800208a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe ff5e 	bl	8000f34 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0b5      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d105      	bne.n	80020a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a38      	ldr	r2, [pc, #224]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a1 	beq.w	80021f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d05c      	beq.n	8002178 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d141      	bne.n	800214a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x478>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff32 	bl	8000f34 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d4:	f7fe ff2e 	bl	8000f34 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e087      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	019b      	lsls	r3, r3, #6
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3b01      	subs	r3, #1
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	491b      	ldr	r1, [pc, #108]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x478>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe ff07 	bl	8000f34 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212a:	f7fe ff03 	bl	8000f34 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e05c      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x416>
 8002148:	e054      	b.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCC_OscConfig+0x478>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fef0 	bl	8000f34 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe feec 	bl	8000f34 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e045      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x470>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x444>
 8002176:	e03d      	b.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e038      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
 8002184:	40023800 	.word	0x40023800
 8002188:	40007000 	.word	0x40007000
 800218c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x4ec>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d028      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d121      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d11a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d111      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	3b01      	subs	r3, #1
 80021da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800

08002204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0cc      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d90c      	bls.n	8002240 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b8      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002262:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800227a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	494d      	ldr	r1, [pc, #308]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d044      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d119      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e067      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4934      	ldr	r1, [pc, #208]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7fe fe1e 	bl	8000f34 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7fe fe1a 	bl	8000f34 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e04f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d20c      	bcs.n	800234c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4916      	ldr	r1, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800238a:	f000 f821 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490a      	ldr	r1, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fd7e 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023c00 	.word	0x40023c00
 80023c0:	40023800 	.word	0x40023800
 80023c4:	080045e4 	.word	0x080045e4
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	20000010 	.word	0x20000010

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d4:	b094      	sub	sp, #80	; 0x50
 80023d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	647b      	str	r3, [r7, #68]	; 0x44
 80023dc:	2300      	movs	r3, #0
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e8:	4b79      	ldr	r3, [pc, #484]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d00d      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x40>
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	f200 80e1 	bhi.w	80025bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x34>
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0x3a>
 8002402:	e0db      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002406:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002408:	e0db      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800240c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800240e:	e0d8      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002410:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241a:	4b6d      	ldr	r3, [pc, #436]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d063      	beq.n	80024ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002426:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	2200      	movs	r2, #0
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002430:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
 800243e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002442:	4622      	mov	r2, r4
 8002444:	462b      	mov	r3, r5
 8002446:	f04f 0000 	mov.w	r0, #0
 800244a:	f04f 0100 	mov.w	r1, #0
 800244e:	0159      	lsls	r1, r3, #5
 8002450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002454:	0150      	lsls	r0, r2, #5
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4621      	mov	r1, r4
 800245c:	1a51      	subs	r1, r2, r1
 800245e:	6139      	str	r1, [r7, #16]
 8002460:	4629      	mov	r1, r5
 8002462:	eb63 0301 	sbc.w	r3, r3, r1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002474:	4659      	mov	r1, fp
 8002476:	018b      	lsls	r3, r1, #6
 8002478:	4651      	mov	r1, sl
 800247a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247e:	4651      	mov	r1, sl
 8002480:	018a      	lsls	r2, r1, #6
 8002482:	4651      	mov	r1, sl
 8002484:	ebb2 0801 	subs.w	r8, r2, r1
 8002488:	4659      	mov	r1, fp
 800248a:	eb63 0901 	sbc.w	r9, r3, r1
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a2:	4690      	mov	r8, r2
 80024a4:	4699      	mov	r9, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	eb18 0303 	adds.w	r3, r8, r3
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	462b      	mov	r3, r5
 80024b0:	eb49 0303 	adc.w	r3, r9, r3
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024c2:	4629      	mov	r1, r5
 80024c4:	024b      	lsls	r3, r1, #9
 80024c6:	4621      	mov	r1, r4
 80024c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024cc:	4621      	mov	r1, r4
 80024ce:	024a      	lsls	r2, r1, #9
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d6:	2200      	movs	r2, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e0:	f7fd fed6 	bl	8000290 <__aeabi_uldivmod>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4613      	mov	r3, r2
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ec:	e058      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	099b      	lsrs	r3, r3, #6
 80024f4:	2200      	movs	r2, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	4611      	mov	r1, r2
 80024fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002508:	4642      	mov	r2, r8
 800250a:	464b      	mov	r3, r9
 800250c:	f04f 0000 	mov.w	r0, #0
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	0159      	lsls	r1, r3, #5
 8002516:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251a:	0150      	lsls	r0, r2, #5
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4641      	mov	r1, r8
 8002522:	ebb2 0a01 	subs.w	sl, r2, r1
 8002526:	4649      	mov	r1, r9
 8002528:	eb63 0b01 	sbc.w	fp, r3, r1
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002538:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800253c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002540:	ebb2 040a 	subs.w	r4, r2, sl
 8002544:	eb63 050b 	sbc.w	r5, r3, fp
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	00eb      	lsls	r3, r5, #3
 8002552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002556:	00e2      	lsls	r2, r4, #3
 8002558:	4614      	mov	r4, r2
 800255a:	461d      	mov	r5, r3
 800255c:	4643      	mov	r3, r8
 800255e:	18e3      	adds	r3, r4, r3
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	464b      	mov	r3, r9
 8002564:	eb45 0303 	adc.w	r3, r5, r3
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002576:	4629      	mov	r1, r5
 8002578:	028b      	lsls	r3, r1, #10
 800257a:	4621      	mov	r1, r4
 800257c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002580:	4621      	mov	r1, r4
 8002582:	028a      	lsls	r2, r1, #10
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	2200      	movs	r2, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	61fa      	str	r2, [r7, #28]
 8002590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002594:	f7fd fe7c 	bl	8000290 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3750      	adds	r7, #80	; 0x50
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	007a1200 	.word	0x007a1200

080025dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	2000000c 	.word	0x2000000c

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	080045f4 	.word	0x080045f4

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffdc 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0b5b      	lsrs	r3, r3, #13
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	080045f4 	.word	0x080045f4

08002644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e03f      	b.n	80026d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fa8c 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f001 f84d 	bl	8003728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b08a      	sub	sp, #40	; 0x28
 80026e2:	af02      	add	r7, sp, #8
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d17c      	bne.n	80027f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_UART_Transmit+0x2c>
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e075      	b.n	80027fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_UART_Transmit+0x3e>
 8002718:	2302      	movs	r3, #2
 800271a:	e06e      	b.n	80027fa <HAL_UART_Transmit+0x11c>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2221      	movs	r2, #33	; 0x21
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002732:	f7fe fbff 	bl	8000f34 <HAL_GetTick>
 8002736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	88fa      	ldrh	r2, [r7, #6]
 8002742:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274c:	d108      	bne.n	8002760 <HAL_UART_Transmit+0x82>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e003      	b.n	8002768 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002770:	e02a      	b.n	80027c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2200      	movs	r2, #0
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fd04 	bl	800318a <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e036      	b.n	80027fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	3302      	adds	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e007      	b.n	80027ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3301      	adds	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1cf      	bne.n	8002772 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2200      	movs	r2, #0
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fcd4 	bl	800318a <UART_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e006      	b.n	80027fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	d165      	bne.n	80028ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <HAL_UART_Transmit_DMA+0x26>
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e05e      	b.n	80028ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_UART_Transmit_DMA+0x38>
 8002838:	2302      	movs	r3, #2
 800283a:	e057      	b.n	80028ec <HAL_UART_Transmit_DMA+0xe8>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	88fa      	ldrh	r2, [r7, #6]
 800284e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_UART_Transmit_DMA+0xf0>)
 800286a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_UART_Transmit_DMA+0xf4>)
 8002872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_UART_Transmit_DMA+0xf8>)
 800287a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	2200      	movs	r2, #0
 8002882:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3304      	adds	r3, #4
 8002898:	461a      	mov	r2, r3
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	f7fe fd16 	bl	80012cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3314      	adds	r3, #20
 80028b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	617b      	str	r3, [r7, #20]
   return(result);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3314      	adds	r3, #20
 80028d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d2:	627a      	str	r2, [r7, #36]	; 0x24
 80028d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	6a39      	ldr	r1, [r7, #32]
 80028d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	61fb      	str	r3, [r7, #28]
   return(result);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e5      	bne.n	80028b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3730      	adds	r7, #48	; 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08002ee5 	.word	0x08002ee5
 80028f8:	08002f7f 	.word	0x08002f7f
 80028fc:	080030f7 	.word	0x080030f7

08002900 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	d11d      	bne.n	8002956 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_UART_Receive_DMA+0x26>
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e016      	b.n	8002958 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_UART_Receive_DMA+0x38>
 8002934:	2302      	movs	r3, #2
 8002936:	e00f      	b.n	8002958 <HAL_UART_Receive_DMA+0x58>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	461a      	mov	r2, r3
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fc8b 	bl	8003268 <UART_Start_Receive_DMA>
 8002952:	4603      	mov	r3, r0
 8002954:	e000      	b.n	8002958 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0ba      	sub	sp, #232	; 0xe8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800299e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_UART_IRQHandler+0x66>
 80029b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fdf7 	bl	80035b2 <UART_Receive_IT>
      return;
 80029c4:	e256      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80de 	beq.w	8002b8c <HAL_UART_IRQHandler+0x22c>
 80029d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80d1 	beq.w	8002b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_UART_IRQHandler+0xae>
 80029f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_UART_IRQHandler+0xd2>
 8002a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_UART_IRQHandler+0xf6>
 8002a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d011      	beq.n	8002a86 <HAL_UART_IRQHandler+0x126>
 8002a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0208 	orr.w	r2, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 81ed 	beq.w	8002e6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_UART_IRQHandler+0x14e>
 8002a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fd82 	bl	80035b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_UART_IRQHandler+0x17a>
 8002ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04f      	beq.n	8002b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fc8a 	bl	80033f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d141      	bne.n	8002b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3314      	adds	r3, #20
 8002af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1d9      	bne.n	8002aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	4a7d      	ldr	r2, [pc, #500]	; (8002d3c <HAL_UART_IRQHandler+0x3dc>)
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fc84 	bl	800145c <HAL_DMA_Abort_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00e      	b.n	8002b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9a4 	bl	8002eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00a      	b.n	8002b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f9a0 	bl	8002eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e006      	b.n	8002b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f99c 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b86:	e170      	b.n	8002e6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	bf00      	nop
    return;
 8002b8a:	e16e      	b.n	8002e6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 814a 	bne.w	8002e2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8143 	beq.w	8002e2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 813c 	beq.w	8002e2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	f040 80b4 	bne.w	8002d40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8140 	beq.w	8002e6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f080 8139 	bcs.w	8002e6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	f000 8088 	beq.w	8002d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1d9      	bne.n	8002c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3314      	adds	r3, #20
 8002c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e1      	bne.n	8002c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e3      	bne.n	8002c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	f023 0310 	bic.w	r3, r3, #16
 8002cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d04:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e3      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fb2d 	bl	800137c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8ca 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d38:	e099      	b.n	8002e6e <HAL_UART_IRQHandler+0x50e>
 8002d3a:	bf00      	nop
 8002d3c:	080034bb 	.word	0x080034bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 808b 	beq.w	8002e72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8086 	beq.w	8002e72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d8a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e3      	bne.n	8002d66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3314      	adds	r3, #20
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	623b      	str	r3, [r7, #32]
   return(result);
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3314      	adds	r3, #20
 8002dbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dc2:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dca:	e841 2300 	strex	r3, r2, [r1]
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e3      	bne.n	8002d9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e08:	61fa      	str	r2, [r7, #28]
 8002e0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	69b9      	ldr	r1, [r7, #24]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	e841 2300 	strex	r3, r2, [r1]
 8002e14:	617b      	str	r3, [r7, #20]
   return(result);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e3      	bne.n	8002de4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f852 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e28:	e023      	b.n	8002e72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_UART_IRQHandler+0x4ea>
 8002e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fb4d 	bl	80034e2 <UART_Transmit_IT>
    return;
 8002e48:	e014      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00e      	beq.n	8002e74 <HAL_UART_IRQHandler+0x514>
 8002e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fb8d 	bl	8003582 <UART_EndTransmit_IT>
    return;
 8002e68:	e004      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
    return;
 8002e6a:	bf00      	nop
 8002e6c:	e002      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
      return;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
      return;
 8002e72:	bf00      	nop
  }
}
 8002e74:	37e8      	adds	r7, #232	; 0xe8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop

08002e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b090      	sub	sp, #64	; 0x40
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d137      	bne.n	8002f70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f02:	2200      	movs	r2, #0
 8002f04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	623b      	str	r3, [r7, #32]
   return(result);
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f26:	633a      	str	r2, [r7, #48]	; 0x30
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e5      	bne.n	8002f06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	330c      	adds	r3, #12
 8002f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f5a:	61fa      	str	r2, [r7, #28]
 8002f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	617b      	str	r3, [r7, #20]
   return(result);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e5      	bne.n	8002f3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f6e:	e002      	b.n	8002f76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002f70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f72:	f7ff ff83 	bl	8002e7c <HAL_UART_TxCpltCallback>
}
 8002f76:	bf00      	nop
 8002f78:	3740      	adds	r7, #64	; 0x40
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff7f 	bl	8002e90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b09c      	sub	sp, #112	; 0x70
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d172      	bne.n	800309c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	667b      	str	r3, [r7, #100]	; 0x64
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003010:	647a      	str	r2, [r7, #68]	; 0x44
 8003012:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	623b      	str	r3, [r7, #32]
   return(result);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303a:	663b      	str	r3, [r7, #96]	; 0x60
 800303c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003044:	633a      	str	r2, [r7, #48]	; 0x30
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800304a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	2b01      	cmp	r3, #1
 8003066:	d119      	bne.n	800309c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	60fb      	str	r3, [r7, #12]
   return(result);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0310 	bic.w	r3, r3, #16
 800307e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003088:	61fa      	str	r2, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	617b      	str	r3, [r7, #20]
   return(result);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030a8:	4619      	mov	r1, r3
 80030aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030ac:	f7ff ff0e 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030b0:	e002      	b.n	80030b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80030b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030b4:	f7fd fc22 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 80030b8:	bf00      	nop
 80030ba:	3770      	adds	r7, #112	; 0x70
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff fef3 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030e6:	e002      	b.n	80030ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f7ff fedb 	bl	8002ea4 <HAL_UART_RxHalfCpltCallback>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b80      	cmp	r3, #128	; 0x80
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b21      	cmp	r3, #33	; 0x21
 8003128:	d108      	bne.n	800313c <UART_DMAError+0x46>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003136:	68b8      	ldr	r0, [r7, #8]
 8003138:	f000 f934 	bl	80033a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b22      	cmp	r3, #34	; 0x22
 800315c:	d108      	bne.n	8003170 <UART_DMAError+0x7a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800316a:	68b8      	ldr	r0, [r7, #8]
 800316c:	f000 f942 	bl	80033f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800317c:	68b8      	ldr	r0, [r7, #8]
 800317e:	f7ff fe9b 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b090      	sub	sp, #64	; 0x40
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4613      	mov	r3, r2
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319a:	e050      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d04c      	beq.n	800323e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <UART_WaitOnFlagUntilTimeout+0x30>
 80031aa:	f7fd fec3 	bl	8000f34 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d241      	bcs.n	800323e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031da:	637a      	str	r2, [r7, #52]	; 0x34
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e5      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	613b      	str	r3, [r7, #16]
   return(result);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800320e:	623a      	str	r2, [r7, #32]
 8003210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	69f9      	ldr	r1, [r7, #28]
 8003214:	6a3a      	ldr	r2, [r7, #32]
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	61bb      	str	r3, [r7, #24]
   return(result);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e00f      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	429a      	cmp	r2, r3
 800325a:	d09f      	beq.n	800319c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3740      	adds	r7, #64	; 0x40
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b098      	sub	sp, #96	; 0x60
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2222      	movs	r2, #34	; 0x22
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	4a40      	ldr	r2, [pc, #256]	; (8003398 <UART_Start_Receive_DMA+0x130>)
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	4a3f      	ldr	r2, [pc, #252]	; (800339c <UART_Start_Receive_DMA+0x134>)
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	4a3e      	ldr	r2, [pc, #248]	; (80033a0 <UART_Start_Receive_DMA+0x138>)
 80032a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	2200      	movs	r2, #0
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	f7fe f800 	bl	80012cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	65bb      	str	r3, [r7, #88]	; 0x58
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003312:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003314:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003318:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e5      	bne.n	80032f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	657b      	str	r3, [r7, #84]	; 0x54
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003346:	63ba      	str	r2, [r7, #56]	; 0x38
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800334c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e5      	bne.n	8003326 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3314      	adds	r3, #20
 8003360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	617b      	str	r3, [r7, #20]
   return(result);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3314      	adds	r3, #20
 8003378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800337a:	627a      	str	r2, [r7, #36]	; 0x24
 800337c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	61fb      	str	r3, [r7, #28]
   return(result);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3760      	adds	r7, #96	; 0x60
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	08002f9b 	.word	0x08002f9b
 800339c:	080030c1 	.word	0x080030c1
 80033a0:	080030f7 	.word	0x080030f7

080033a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	61ba      	str	r2, [r7, #24]
 80033ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6979      	ldr	r1, [r7, #20]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	613b      	str	r3, [r7, #16]
   return(result);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80033e8:	bf00      	nop
 80033ea:	3724      	adds	r7, #36	; 0x24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b095      	sub	sp, #84	; 0x54
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800341c:	643a      	str	r2, [r7, #64]	; 0x40
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d119      	bne.n	80034a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	60bb      	str	r3, [r7, #8]
   return(result);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	647b      	str	r3, [r7, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800348c:	61ba      	str	r2, [r7, #24]
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	613b      	str	r3, [r7, #16]
   return(result);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034ae:	bf00      	nop
 80034b0:	3754      	adds	r7, #84	; 0x54
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fcef 	bl	8002eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b21      	cmp	r3, #33	; 0x21
 80034f4:	d13e      	bne.n	8003574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fe:	d114      	bne.n	800352a <UART_Transmit_IT+0x48>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d110      	bne.n	800352a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]
 8003528:	e008      	b.n	800353c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	1c59      	adds	r1, r3, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6211      	str	r1, [r2, #32]
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4619      	mov	r1, r3
 800354a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10f      	bne.n	8003570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800355e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fc6a 	bl	8002e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b08c      	sub	sp, #48	; 0x30
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b22      	cmp	r3, #34	; 0x22
 80035c4:	f040 80ab 	bne.w	800371e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	d117      	bne.n	8003602 <UART_Receive_IT+0x50>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d113      	bne.n	8003602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	1c9a      	adds	r2, r3, #2
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003600:	e026      	b.n	8003650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d007      	beq.n	8003626 <UART_Receive_IT+0x74>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <UART_Receive_IT+0x82>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	e008      	b.n	8003646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003640:	b2da      	uxtb	r2, r3
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29b      	uxth	r3, r3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	4619      	mov	r1, r3
 800365e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003660:	2b00      	cmp	r3, #0
 8003662:	d15a      	bne.n	800371a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0220 	bic.w	r2, r2, #32
 8003672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d135      	bne.n	8003710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f023 0310 	bic.w	r3, r3, #16
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	330c      	adds	r3, #12
 80036c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ca:	623a      	str	r2, [r7, #32]
 80036cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	69f9      	ldr	r1, [r7, #28]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d10a      	bne.n	8003702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fbdf 	bl	8002ecc <HAL_UARTEx_RxEventCallback>
 800370e:	e002      	b.n	8003716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fd f8f3 	bl	80008fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e002      	b.n	8003720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	; 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b0c0      	sub	sp, #256	; 0x100
 800372e:	af00      	add	r7, sp, #0
 8003730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	68d9      	ldr	r1, [r3, #12]
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	ea40 0301 	orr.w	r3, r0, r1
 8003750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003780:	f021 010c 	bic.w	r1, r1, #12
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800378e:	430b      	orrs	r3, r1
 8003790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	6999      	ldr	r1, [r3, #24]
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	ea40 0301 	orr.w	r3, r0, r1
 80037ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <UART_SetConfig+0x2cc>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d005      	beq.n	80037c8 <UART_SetConfig+0xa0>
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b8d      	ldr	r3, [pc, #564]	; (80039f8 <UART_SetConfig+0x2d0>)
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d104      	bne.n	80037d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037c8:	f7fe ff28 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80037cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037d0:	e003      	b.n	80037da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7fe ff0f 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 80037d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	f040 810c 	bne.w	8003a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037fa:	4622      	mov	r2, r4
 80037fc:	462b      	mov	r3, r5
 80037fe:	1891      	adds	r1, r2, r2
 8003800:	65b9      	str	r1, [r7, #88]	; 0x58
 8003802:	415b      	adcs	r3, r3
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800380a:	4621      	mov	r1, r4
 800380c:	eb12 0801 	adds.w	r8, r2, r1
 8003810:	4629      	mov	r1, r5
 8003812:	eb43 0901 	adc.w	r9, r3, r1
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800382a:	4690      	mov	r8, r2
 800382c:	4699      	mov	r9, r3
 800382e:	4623      	mov	r3, r4
 8003830:	eb18 0303 	adds.w	r3, r8, r3
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003838:	462b      	mov	r3, r5
 800383a:	eb49 0303 	adc.w	r3, r9, r3
 800383e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800384e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003856:	460b      	mov	r3, r1
 8003858:	18db      	adds	r3, r3, r3
 800385a:	653b      	str	r3, [r7, #80]	; 0x50
 800385c:	4613      	mov	r3, r2
 800385e:	eb42 0303 	adc.w	r3, r2, r3
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
 8003864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800386c:	f7fc fd10 	bl	8000290 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b61      	ldr	r3, [pc, #388]	; (80039fc <UART_SetConfig+0x2d4>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	011c      	lsls	r4, r3, #4
 800387e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800388c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003890:	4642      	mov	r2, r8
 8003892:	464b      	mov	r3, r9
 8003894:	1891      	adds	r1, r2, r2
 8003896:	64b9      	str	r1, [r7, #72]	; 0x48
 8003898:	415b      	adcs	r3, r3
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800389c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038a0:	4641      	mov	r1, r8
 80038a2:	eb12 0a01 	adds.w	sl, r2, r1
 80038a6:	4649      	mov	r1, r9
 80038a8:	eb43 0b01 	adc.w	fp, r3, r1
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c0:	4692      	mov	sl, r2
 80038c2:	469b      	mov	fp, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	eb1a 0303 	adds.w	r3, sl, r3
 80038ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ce:	464b      	mov	r3, r9
 80038d0:	eb4b 0303 	adc.w	r3, fp, r3
 80038d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038ec:	460b      	mov	r3, r1
 80038ee:	18db      	adds	r3, r3, r3
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
 80038f2:	4613      	mov	r3, r2
 80038f4:	eb42 0303 	adc.w	r3, r2, r3
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003902:	f7fc fcc5 	bl	8000290 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4611      	mov	r1, r2
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <UART_SetConfig+0x2d4>)
 800390e:	fba3 2301 	umull	r2, r3, r3, r1
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2264      	movs	r2, #100	; 0x64
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	1acb      	subs	r3, r1, r3
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <UART_SetConfig+0x2d4>)
 8003924:	fba3 2302 	umull	r2, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003930:	441c      	add	r4, r3
 8003932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800393c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	1891      	adds	r1, r2, r2
 800394a:	63b9      	str	r1, [r7, #56]	; 0x38
 800394c:	415b      	adcs	r3, r3
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003954:	4641      	mov	r1, r8
 8003956:	1851      	adds	r1, r2, r1
 8003958:	6339      	str	r1, [r7, #48]	; 0x30
 800395a:	4649      	mov	r1, r9
 800395c:	414b      	adcs	r3, r1
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800396c:	4659      	mov	r1, fp
 800396e:	00cb      	lsls	r3, r1, #3
 8003970:	4651      	mov	r1, sl
 8003972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003976:	4651      	mov	r1, sl
 8003978:	00ca      	lsls	r2, r1, #3
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	4603      	mov	r3, r0
 8003980:	4642      	mov	r2, r8
 8003982:	189b      	adds	r3, r3, r2
 8003984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003988:	464b      	mov	r3, r9
 800398a:	460a      	mov	r2, r1
 800398c:	eb42 0303 	adc.w	r3, r2, r3
 8003990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039a8:	460b      	mov	r3, r1
 80039aa:	18db      	adds	r3, r3, r3
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ae:	4613      	mov	r3, r2
 80039b0:	eb42 0303 	adc.w	r3, r2, r3
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039be:	f7fc fc67 	bl	8000290 <__aeabi_uldivmod>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <UART_SetConfig+0x2d4>)
 80039c8:	fba3 1302 	umull	r1, r3, r3, r2
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	2164      	movs	r1, #100	; 0x64
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <UART_SetConfig+0x2d4>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 0207 	and.w	r2, r3, #7
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4422      	add	r2, r4
 80039ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039f0:	e105      	b.n	8003bfe <UART_SetConfig+0x4d6>
 80039f2:	bf00      	nop
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a12:	4642      	mov	r2, r8
 8003a14:	464b      	mov	r3, r9
 8003a16:	1891      	adds	r1, r2, r2
 8003a18:	6239      	str	r1, [r7, #32]
 8003a1a:	415b      	adcs	r3, r3
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a22:	4641      	mov	r1, r8
 8003a24:	1854      	adds	r4, r2, r1
 8003a26:	4649      	mov	r1, r9
 8003a28:	eb43 0501 	adc.w	r5, r3, r1
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	00eb      	lsls	r3, r5, #3
 8003a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a3a:	00e2      	lsls	r2, r4, #3
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	461d      	mov	r5, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	18e3      	adds	r3, r4, r3
 8003a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a48:	464b      	mov	r3, r9
 8003a4a:	eb45 0303 	adc.w	r3, r5, r3
 8003a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a6e:	4629      	mov	r1, r5
 8003a70:	008b      	lsls	r3, r1, #2
 8003a72:	4621      	mov	r1, r4
 8003a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a78:	4621      	mov	r1, r4
 8003a7a:	008a      	lsls	r2, r1, #2
 8003a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a80:	f7fc fc06 	bl	8000290 <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	011c      	lsls	r4, r3, #4
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	61b9      	str	r1, [r7, #24]
 8003aac:	415b      	adcs	r3, r3
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	1851      	adds	r1, r2, r1
 8003ab8:	6139      	str	r1, [r7, #16]
 8003aba:	4649      	mov	r1, r9
 8003abc:	414b      	adcs	r3, r1
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003acc:	4659      	mov	r1, fp
 8003ace:	00cb      	lsls	r3, r1, #3
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad6:	4651      	mov	r1, sl
 8003ad8:	00ca      	lsls	r2, r1, #3
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4642      	mov	r2, r8
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	008b      	lsls	r3, r1, #2
 8003b10:	4641      	mov	r1, r8
 8003b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b16:	4641      	mov	r1, r8
 8003b18:	008a      	lsls	r2, r1, #2
 8003b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b1e:	f7fc fbb7 	bl	8000290 <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003b28:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	2164      	movs	r1, #100	; 0x64
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	3332      	adds	r3, #50	; 0x32
 8003b3a:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b46:	441c      	add	r4, r3
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b50:	677a      	str	r2, [r7, #116]	; 0x74
 8003b52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b56:	4642      	mov	r2, r8
 8003b58:	464b      	mov	r3, r9
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b66:	4641      	mov	r1, r8
 8003b68:	1851      	adds	r1, r2, r1
 8003b6a:	6039      	str	r1, [r7, #0]
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	414b      	adcs	r3, r1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b7e:	4659      	mov	r1, fp
 8003b80:	00cb      	lsls	r3, r1, #3
 8003b82:	4651      	mov	r1, sl
 8003b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b88:	4651      	mov	r1, sl
 8003b8a:	00ca      	lsls	r2, r1, #3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4603      	mov	r3, r0
 8003b92:	4642      	mov	r2, r8
 8003b94:	189b      	adds	r3, r3, r2
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b98:	464b      	mov	r3, r9
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	663b      	str	r3, [r7, #96]	; 0x60
 8003bac:	667a      	str	r2, [r7, #100]	; 0x64
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bba:	4649      	mov	r1, r9
 8003bbc:	008b      	lsls	r3, r1, #2
 8003bbe:	4641      	mov	r1, r8
 8003bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	008a      	lsls	r2, r1, #2
 8003bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bcc:	f7fc fb60 	bl	8000290 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2164      	movs	r1, #100	; 0x64
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	3332      	adds	r3, #50	; 0x32
 8003be8:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <UART_SetConfig+0x4e4>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4422      	add	r2, r4
 8003bfc:	609a      	str	r2, [r3, #8]
}
 8003bfe:	bf00      	nop
 8003c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	51eb851f 	.word	0x51eb851f

08003c10 <__errno>:
 8003c10:	4b01      	ldr	r3, [pc, #4]	; (8003c18 <__errno+0x8>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000018 	.word	0x20000018

08003c1c <__libc_init_array>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4d0d      	ldr	r5, [pc, #52]	; (8003c54 <__libc_init_array+0x38>)
 8003c20:	4c0d      	ldr	r4, [pc, #52]	; (8003c58 <__libc_init_array+0x3c>)
 8003c22:	1b64      	subs	r4, r4, r5
 8003c24:	10a4      	asrs	r4, r4, #2
 8003c26:	2600      	movs	r6, #0
 8003c28:	42a6      	cmp	r6, r4
 8003c2a:	d109      	bne.n	8003c40 <__libc_init_array+0x24>
 8003c2c:	4d0b      	ldr	r5, [pc, #44]	; (8003c5c <__libc_init_array+0x40>)
 8003c2e:	4c0c      	ldr	r4, [pc, #48]	; (8003c60 <__libc_init_array+0x44>)
 8003c30:	f000 fc8e 	bl	8004550 <_init>
 8003c34:	1b64      	subs	r4, r4, r5
 8003c36:	10a4      	asrs	r4, r4, #2
 8003c38:	2600      	movs	r6, #0
 8003c3a:	42a6      	cmp	r6, r4
 8003c3c:	d105      	bne.n	8003c4a <__libc_init_array+0x2e>
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c44:	4798      	blx	r3
 8003c46:	3601      	adds	r6, #1
 8003c48:	e7ee      	b.n	8003c28 <__libc_init_array+0xc>
 8003c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4e:	4798      	blx	r3
 8003c50:	3601      	adds	r6, #1
 8003c52:	e7f2      	b.n	8003c3a <__libc_init_array+0x1e>
 8003c54:	08004640 	.word	0x08004640
 8003c58:	08004640 	.word	0x08004640
 8003c5c:	08004640 	.word	0x08004640
 8003c60:	08004644 	.word	0x08004644

08003c64 <memset>:
 8003c64:	4402      	add	r2, r0
 8003c66:	4603      	mov	r3, r0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <memset+0xa>
 8003c6c:	4770      	bx	lr
 8003c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c72:	e7f9      	b.n	8003c68 <memset+0x4>

08003c74 <siprintf>:
 8003c74:	b40e      	push	{r1, r2, r3}
 8003c76:	b500      	push	{lr}
 8003c78:	b09c      	sub	sp, #112	; 0x70
 8003c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c7c:	9002      	str	r0, [sp, #8]
 8003c7e:	9006      	str	r0, [sp, #24]
 8003c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c84:	4809      	ldr	r0, [pc, #36]	; (8003cac <siprintf+0x38>)
 8003c86:	9107      	str	r1, [sp, #28]
 8003c88:	9104      	str	r1, [sp, #16]
 8003c8a:	4909      	ldr	r1, [pc, #36]	; (8003cb0 <siprintf+0x3c>)
 8003c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c90:	9105      	str	r1, [sp, #20]
 8003c92:	6800      	ldr	r0, [r0, #0]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	a902      	add	r1, sp, #8
 8003c98:	f000 f868 	bl	8003d6c <_svfiprintf_r>
 8003c9c:	9b02      	ldr	r3, [sp, #8]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	b01c      	add	sp, #112	; 0x70
 8003ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca8:	b003      	add	sp, #12
 8003caa:	4770      	bx	lr
 8003cac:	20000018 	.word	0x20000018
 8003cb0:	ffff0208 	.word	0xffff0208

08003cb4 <__ssputs_r>:
 8003cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb8:	688e      	ldr	r6, [r1, #8]
 8003cba:	429e      	cmp	r6, r3
 8003cbc:	4682      	mov	sl, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	4690      	mov	r8, r2
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	d838      	bhi.n	8003d38 <__ssputs_r+0x84>
 8003cc6:	898a      	ldrh	r2, [r1, #12]
 8003cc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ccc:	d032      	beq.n	8003d34 <__ssputs_r+0x80>
 8003cce:	6825      	ldr	r5, [r4, #0]
 8003cd0:	6909      	ldr	r1, [r1, #16]
 8003cd2:	eba5 0901 	sub.w	r9, r5, r1
 8003cd6:	6965      	ldr	r5, [r4, #20]
 8003cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	444b      	add	r3, r9
 8003ce4:	106d      	asrs	r5, r5, #1
 8003ce6:	429d      	cmp	r5, r3
 8003ce8:	bf38      	it	cc
 8003cea:	461d      	movcc	r5, r3
 8003cec:	0553      	lsls	r3, r2, #21
 8003cee:	d531      	bpl.n	8003d54 <__ssputs_r+0xa0>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	f000 fb63 	bl	80043bc <_malloc_r>
 8003cf6:	4606      	mov	r6, r0
 8003cf8:	b950      	cbnz	r0, 8003d10 <__ssputs_r+0x5c>
 8003cfa:	230c      	movs	r3, #12
 8003cfc:	f8ca 3000 	str.w	r3, [sl]
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d06:	81a3      	strh	r3, [r4, #12]
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d10:	6921      	ldr	r1, [r4, #16]
 8003d12:	464a      	mov	r2, r9
 8003d14:	f000 fabe 	bl	8004294 <memcpy>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	6126      	str	r6, [r4, #16]
 8003d26:	6165      	str	r5, [r4, #20]
 8003d28:	444e      	add	r6, r9
 8003d2a:	eba5 0509 	sub.w	r5, r5, r9
 8003d2e:	6026      	str	r6, [r4, #0]
 8003d30:	60a5      	str	r5, [r4, #8]
 8003d32:	463e      	mov	r6, r7
 8003d34:	42be      	cmp	r6, r7
 8003d36:	d900      	bls.n	8003d3a <__ssputs_r+0x86>
 8003d38:	463e      	mov	r6, r7
 8003d3a:	6820      	ldr	r0, [r4, #0]
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4641      	mov	r1, r8
 8003d40:	f000 fab6 	bl	80042b0 <memmove>
 8003d44:	68a3      	ldr	r3, [r4, #8]
 8003d46:	1b9b      	subs	r3, r3, r6
 8003d48:	60a3      	str	r3, [r4, #8]
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4433      	add	r3, r6
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	2000      	movs	r0, #0
 8003d52:	e7db      	b.n	8003d0c <__ssputs_r+0x58>
 8003d54:	462a      	mov	r2, r5
 8003d56:	f000 fba5 	bl	80044a4 <_realloc_r>
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d1e1      	bne.n	8003d24 <__ssputs_r+0x70>
 8003d60:	6921      	ldr	r1, [r4, #16]
 8003d62:	4650      	mov	r0, sl
 8003d64:	f000 fabe 	bl	80042e4 <_free_r>
 8003d68:	e7c7      	b.n	8003cfa <__ssputs_r+0x46>
	...

08003d6c <_svfiprintf_r>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	4698      	mov	r8, r3
 8003d72:	898b      	ldrh	r3, [r1, #12]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	b09d      	sub	sp, #116	; 0x74
 8003d78:	4607      	mov	r7, r0
 8003d7a:	460d      	mov	r5, r1
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	d50e      	bpl.n	8003d9e <_svfiprintf_r+0x32>
 8003d80:	690b      	ldr	r3, [r1, #16]
 8003d82:	b963      	cbnz	r3, 8003d9e <_svfiprintf_r+0x32>
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	f000 fb19 	bl	80043bc <_malloc_r>
 8003d8a:	6028      	str	r0, [r5, #0]
 8003d8c:	6128      	str	r0, [r5, #16]
 8003d8e:	b920      	cbnz	r0, 8003d9a <_svfiprintf_r+0x2e>
 8003d90:	230c      	movs	r3, #12
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	e0d1      	b.n	8003f3e <_svfiprintf_r+0x1d2>
 8003d9a:	2340      	movs	r3, #64	; 0x40
 8003d9c:	616b      	str	r3, [r5, #20]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9309      	str	r3, [sp, #36]	; 0x24
 8003da2:	2320      	movs	r3, #32
 8003da4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dac:	2330      	movs	r3, #48	; 0x30
 8003dae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f58 <_svfiprintf_r+0x1ec>
 8003db2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db6:	f04f 0901 	mov.w	r9, #1
 8003dba:	4623      	mov	r3, r4
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dc2:	b10a      	cbz	r2, 8003dc8 <_svfiprintf_r+0x5c>
 8003dc4:	2a25      	cmp	r2, #37	; 0x25
 8003dc6:	d1f9      	bne.n	8003dbc <_svfiprintf_r+0x50>
 8003dc8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dcc:	d00b      	beq.n	8003de6 <_svfiprintf_r+0x7a>
 8003dce:	465b      	mov	r3, fp
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ff6d 	bl	8003cb4 <__ssputs_r>
 8003dda:	3001      	adds	r0, #1
 8003ddc:	f000 80aa 	beq.w	8003f34 <_svfiprintf_r+0x1c8>
 8003de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de2:	445a      	add	r2, fp
 8003de4:	9209      	str	r2, [sp, #36]	; 0x24
 8003de6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a2 	beq.w	8003f34 <_svfiprintf_r+0x1c8>
 8003df0:	2300      	movs	r3, #0
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295
 8003df6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dfa:	f10a 0a01 	add.w	sl, sl, #1
 8003dfe:	9304      	str	r3, [sp, #16]
 8003e00:	9307      	str	r3, [sp, #28]
 8003e02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e06:	931a      	str	r3, [sp, #104]	; 0x68
 8003e08:	4654      	mov	r4, sl
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e10:	4851      	ldr	r0, [pc, #324]	; (8003f58 <_svfiprintf_r+0x1ec>)
 8003e12:	f7fc f9ed 	bl	80001f0 <memchr>
 8003e16:	9a04      	ldr	r2, [sp, #16]
 8003e18:	b9d8      	cbnz	r0, 8003e52 <_svfiprintf_r+0xe6>
 8003e1a:	06d0      	lsls	r0, r2, #27
 8003e1c:	bf44      	itt	mi
 8003e1e:	2320      	movmi	r3, #32
 8003e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e24:	0711      	lsls	r1, r2, #28
 8003e26:	bf44      	itt	mi
 8003e28:	232b      	movmi	r3, #43	; 0x2b
 8003e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e32:	2b2a      	cmp	r3, #42	; 0x2a
 8003e34:	d015      	beq.n	8003e62 <_svfiprintf_r+0xf6>
 8003e36:	9a07      	ldr	r2, [sp, #28]
 8003e38:	4654      	mov	r4, sl
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f04f 0c0a 	mov.w	ip, #10
 8003e40:	4621      	mov	r1, r4
 8003e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e46:	3b30      	subs	r3, #48	; 0x30
 8003e48:	2b09      	cmp	r3, #9
 8003e4a:	d94e      	bls.n	8003eea <_svfiprintf_r+0x17e>
 8003e4c:	b1b0      	cbz	r0, 8003e7c <_svfiprintf_r+0x110>
 8003e4e:	9207      	str	r2, [sp, #28]
 8003e50:	e014      	b.n	8003e7c <_svfiprintf_r+0x110>
 8003e52:	eba0 0308 	sub.w	r3, r0, r8
 8003e56:	fa09 f303 	lsl.w	r3, r9, r3
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	9304      	str	r3, [sp, #16]
 8003e5e:	46a2      	mov	sl, r4
 8003e60:	e7d2      	b.n	8003e08 <_svfiprintf_r+0x9c>
 8003e62:	9b03      	ldr	r3, [sp, #12]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	9103      	str	r1, [sp, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfbb      	ittet	lt
 8003e6e:	425b      	neglt	r3, r3
 8003e70:	f042 0202 	orrlt.w	r2, r2, #2
 8003e74:	9307      	strge	r3, [sp, #28]
 8003e76:	9307      	strlt	r3, [sp, #28]
 8003e78:	bfb8      	it	lt
 8003e7a:	9204      	strlt	r2, [sp, #16]
 8003e7c:	7823      	ldrb	r3, [r4, #0]
 8003e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e80:	d10c      	bne.n	8003e9c <_svfiprintf_r+0x130>
 8003e82:	7863      	ldrb	r3, [r4, #1]
 8003e84:	2b2a      	cmp	r3, #42	; 0x2a
 8003e86:	d135      	bne.n	8003ef4 <_svfiprintf_r+0x188>
 8003e88:	9b03      	ldr	r3, [sp, #12]
 8003e8a:	1d1a      	adds	r2, r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	9203      	str	r2, [sp, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bfb8      	it	lt
 8003e94:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e98:	3402      	adds	r4, #2
 8003e9a:	9305      	str	r3, [sp, #20]
 8003e9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f68 <_svfiprintf_r+0x1fc>
 8003ea0:	7821      	ldrb	r1, [r4, #0]
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	4650      	mov	r0, sl
 8003ea6:	f7fc f9a3 	bl	80001f0 <memchr>
 8003eaa:	b140      	cbz	r0, 8003ebe <_svfiprintf_r+0x152>
 8003eac:	2340      	movs	r3, #64	; 0x40
 8003eae:	eba0 000a 	sub.w	r0, r0, sl
 8003eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	4303      	orrs	r3, r0
 8003eba:	3401      	adds	r4, #1
 8003ebc:	9304      	str	r3, [sp, #16]
 8003ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec2:	4826      	ldr	r0, [pc, #152]	; (8003f5c <_svfiprintf_r+0x1f0>)
 8003ec4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ec8:	2206      	movs	r2, #6
 8003eca:	f7fc f991 	bl	80001f0 <memchr>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d038      	beq.n	8003f44 <_svfiprintf_r+0x1d8>
 8003ed2:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <_svfiprintf_r+0x1f4>)
 8003ed4:	bb1b      	cbnz	r3, 8003f1e <_svfiprintf_r+0x1b2>
 8003ed6:	9b03      	ldr	r3, [sp, #12]
 8003ed8:	3307      	adds	r3, #7
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	3308      	adds	r3, #8
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee4:	4433      	add	r3, r6
 8003ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee8:	e767      	b.n	8003dba <_svfiprintf_r+0x4e>
 8003eea:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eee:	460c      	mov	r4, r1
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e7a5      	b.n	8003e40 <_svfiprintf_r+0xd4>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	3401      	adds	r4, #1
 8003ef8:	9305      	str	r3, [sp, #20]
 8003efa:	4619      	mov	r1, r3
 8003efc:	f04f 0c0a 	mov.w	ip, #10
 8003f00:	4620      	mov	r0, r4
 8003f02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f06:	3a30      	subs	r2, #48	; 0x30
 8003f08:	2a09      	cmp	r2, #9
 8003f0a:	d903      	bls.n	8003f14 <_svfiprintf_r+0x1a8>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0c5      	beq.n	8003e9c <_svfiprintf_r+0x130>
 8003f10:	9105      	str	r1, [sp, #20]
 8003f12:	e7c3      	b.n	8003e9c <_svfiprintf_r+0x130>
 8003f14:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f18:	4604      	mov	r4, r0
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e7f0      	b.n	8003f00 <_svfiprintf_r+0x194>
 8003f1e:	ab03      	add	r3, sp, #12
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	462a      	mov	r2, r5
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <_svfiprintf_r+0x1f8>)
 8003f26:	a904      	add	r1, sp, #16
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f3af 8000 	nop.w
 8003f2e:	1c42      	adds	r2, r0, #1
 8003f30:	4606      	mov	r6, r0
 8003f32:	d1d6      	bne.n	8003ee2 <_svfiprintf_r+0x176>
 8003f34:	89ab      	ldrh	r3, [r5, #12]
 8003f36:	065b      	lsls	r3, r3, #25
 8003f38:	f53f af2c 	bmi.w	8003d94 <_svfiprintf_r+0x28>
 8003f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3e:	b01d      	add	sp, #116	; 0x74
 8003f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f44:	ab03      	add	r3, sp, #12
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <_svfiprintf_r+0x1f8>)
 8003f4c:	a904      	add	r1, sp, #16
 8003f4e:	4638      	mov	r0, r7
 8003f50:	f000 f87a 	bl	8004048 <_printf_i>
 8003f54:	e7eb      	b.n	8003f2e <_svfiprintf_r+0x1c2>
 8003f56:	bf00      	nop
 8003f58:	08004604 	.word	0x08004604
 8003f5c:	0800460e 	.word	0x0800460e
 8003f60:	00000000 	.word	0x00000000
 8003f64:	08003cb5 	.word	0x08003cb5
 8003f68:	0800460a 	.word	0x0800460a

08003f6c <_printf_common>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	4616      	mov	r6, r2
 8003f72:	4699      	mov	r9, r3
 8003f74:	688a      	ldr	r2, [r1, #8]
 8003f76:	690b      	ldr	r3, [r1, #16]
 8003f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfb8      	it	lt
 8003f80:	4613      	movlt	r3, r2
 8003f82:	6033      	str	r3, [r6, #0]
 8003f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f88:	4607      	mov	r7, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b10a      	cbz	r2, 8003f92 <_printf_common+0x26>
 8003f8e:	3301      	adds	r3, #1
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	0699      	lsls	r1, r3, #26
 8003f96:	bf42      	ittt	mi
 8003f98:	6833      	ldrmi	r3, [r6, #0]
 8003f9a:	3302      	addmi	r3, #2
 8003f9c:	6033      	strmi	r3, [r6, #0]
 8003f9e:	6825      	ldr	r5, [r4, #0]
 8003fa0:	f015 0506 	ands.w	r5, r5, #6
 8003fa4:	d106      	bne.n	8003fb4 <_printf_common+0x48>
 8003fa6:	f104 0a19 	add.w	sl, r4, #25
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	6832      	ldr	r2, [r6, #0]
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dc26      	bgt.n	8004002 <_printf_common+0x96>
 8003fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb8:	1e13      	subs	r3, r2, #0
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	bf18      	it	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	0692      	lsls	r2, r2, #26
 8003fc2:	d42b      	bmi.n	800401c <_printf_common+0xb0>
 8003fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc8:	4649      	mov	r1, r9
 8003fca:	4638      	mov	r0, r7
 8003fcc:	47c0      	blx	r8
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d01e      	beq.n	8004010 <_printf_common+0xa4>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	68e5      	ldr	r5, [r4, #12]
 8003fd6:	6832      	ldr	r2, [r6, #0]
 8003fd8:	f003 0306 	and.w	r3, r3, #6
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	bf08      	it	eq
 8003fe0:	1aad      	subeq	r5, r5, r2
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	bf0c      	ite	eq
 8003fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fec:	2500      	movne	r5, #0
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	bfc4      	itt	gt
 8003ff2:	1a9b      	subgt	r3, r3, r2
 8003ff4:	18ed      	addgt	r5, r5, r3
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	341a      	adds	r4, #26
 8003ffa:	42b5      	cmp	r5, r6
 8003ffc:	d11a      	bne.n	8004034 <_printf_common+0xc8>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e008      	b.n	8004014 <_printf_common+0xa8>
 8004002:	2301      	movs	r3, #1
 8004004:	4652      	mov	r2, sl
 8004006:	4649      	mov	r1, r9
 8004008:	4638      	mov	r0, r7
 800400a:	47c0      	blx	r8
 800400c:	3001      	adds	r0, #1
 800400e:	d103      	bne.n	8004018 <_printf_common+0xac>
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004018:	3501      	adds	r5, #1
 800401a:	e7c6      	b.n	8003faa <_printf_common+0x3e>
 800401c:	18e1      	adds	r1, r4, r3
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	2030      	movs	r0, #48	; 0x30
 8004022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004026:	4422      	add	r2, r4
 8004028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800402c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004030:	3302      	adds	r3, #2
 8004032:	e7c7      	b.n	8003fc4 <_printf_common+0x58>
 8004034:	2301      	movs	r3, #1
 8004036:	4622      	mov	r2, r4
 8004038:	4649      	mov	r1, r9
 800403a:	4638      	mov	r0, r7
 800403c:	47c0      	blx	r8
 800403e:	3001      	adds	r0, #1
 8004040:	d0e6      	beq.n	8004010 <_printf_common+0xa4>
 8004042:	3601      	adds	r6, #1
 8004044:	e7d9      	b.n	8003ffa <_printf_common+0x8e>
	...

08004048 <_printf_i>:
 8004048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800404c:	7e0f      	ldrb	r7, [r1, #24]
 800404e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004050:	2f78      	cmp	r7, #120	; 0x78
 8004052:	4691      	mov	r9, r2
 8004054:	4680      	mov	r8, r0
 8004056:	460c      	mov	r4, r1
 8004058:	469a      	mov	sl, r3
 800405a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800405e:	d807      	bhi.n	8004070 <_printf_i+0x28>
 8004060:	2f62      	cmp	r7, #98	; 0x62
 8004062:	d80a      	bhi.n	800407a <_printf_i+0x32>
 8004064:	2f00      	cmp	r7, #0
 8004066:	f000 80d8 	beq.w	800421a <_printf_i+0x1d2>
 800406a:	2f58      	cmp	r7, #88	; 0x58
 800406c:	f000 80a3 	beq.w	80041b6 <_printf_i+0x16e>
 8004070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004078:	e03a      	b.n	80040f0 <_printf_i+0xa8>
 800407a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800407e:	2b15      	cmp	r3, #21
 8004080:	d8f6      	bhi.n	8004070 <_printf_i+0x28>
 8004082:	a101      	add	r1, pc, #4	; (adr r1, 8004088 <_printf_i+0x40>)
 8004084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004088:	080040e1 	.word	0x080040e1
 800408c:	080040f5 	.word	0x080040f5
 8004090:	08004071 	.word	0x08004071
 8004094:	08004071 	.word	0x08004071
 8004098:	08004071 	.word	0x08004071
 800409c:	08004071 	.word	0x08004071
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004071 	.word	0x08004071
 80040a8:	08004071 	.word	0x08004071
 80040ac:	08004071 	.word	0x08004071
 80040b0:	08004071 	.word	0x08004071
 80040b4:	08004201 	.word	0x08004201
 80040b8:	08004125 	.word	0x08004125
 80040bc:	080041e3 	.word	0x080041e3
 80040c0:	08004071 	.word	0x08004071
 80040c4:	08004071 	.word	0x08004071
 80040c8:	08004223 	.word	0x08004223
 80040cc:	08004071 	.word	0x08004071
 80040d0:	08004125 	.word	0x08004125
 80040d4:	08004071 	.word	0x08004071
 80040d8:	08004071 	.word	0x08004071
 80040dc:	080041eb 	.word	0x080041eb
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	602a      	str	r2, [r5, #0]
 80040e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0a3      	b.n	800423c <_printf_i+0x1f4>
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	6829      	ldr	r1, [r5, #0]
 80040f8:	0606      	lsls	r6, r0, #24
 80040fa:	f101 0304 	add.w	r3, r1, #4
 80040fe:	d50a      	bpl.n	8004116 <_printf_i+0xce>
 8004100:	680e      	ldr	r6, [r1, #0]
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	2e00      	cmp	r6, #0
 8004106:	da03      	bge.n	8004110 <_printf_i+0xc8>
 8004108:	232d      	movs	r3, #45	; 0x2d
 800410a:	4276      	negs	r6, r6
 800410c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004110:	485e      	ldr	r0, [pc, #376]	; (800428c <_printf_i+0x244>)
 8004112:	230a      	movs	r3, #10
 8004114:	e019      	b.n	800414a <_printf_i+0x102>
 8004116:	680e      	ldr	r6, [r1, #0]
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800411e:	bf18      	it	ne
 8004120:	b236      	sxthne	r6, r6
 8004122:	e7ef      	b.n	8004104 <_printf_i+0xbc>
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	1d19      	adds	r1, r3, #4
 800412a:	6029      	str	r1, [r5, #0]
 800412c:	0601      	lsls	r1, r0, #24
 800412e:	d501      	bpl.n	8004134 <_printf_i+0xec>
 8004130:	681e      	ldr	r6, [r3, #0]
 8004132:	e002      	b.n	800413a <_printf_i+0xf2>
 8004134:	0646      	lsls	r6, r0, #25
 8004136:	d5fb      	bpl.n	8004130 <_printf_i+0xe8>
 8004138:	881e      	ldrh	r6, [r3, #0]
 800413a:	4854      	ldr	r0, [pc, #336]	; (800428c <_printf_i+0x244>)
 800413c:	2f6f      	cmp	r7, #111	; 0x6f
 800413e:	bf0c      	ite	eq
 8004140:	2308      	moveq	r3, #8
 8004142:	230a      	movne	r3, #10
 8004144:	2100      	movs	r1, #0
 8004146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800414a:	6865      	ldr	r5, [r4, #4]
 800414c:	60a5      	str	r5, [r4, #8]
 800414e:	2d00      	cmp	r5, #0
 8004150:	bfa2      	ittt	ge
 8004152:	6821      	ldrge	r1, [r4, #0]
 8004154:	f021 0104 	bicge.w	r1, r1, #4
 8004158:	6021      	strge	r1, [r4, #0]
 800415a:	b90e      	cbnz	r6, 8004160 <_printf_i+0x118>
 800415c:	2d00      	cmp	r5, #0
 800415e:	d04d      	beq.n	80041fc <_printf_i+0x1b4>
 8004160:	4615      	mov	r5, r2
 8004162:	fbb6 f1f3 	udiv	r1, r6, r3
 8004166:	fb03 6711 	mls	r7, r3, r1, r6
 800416a:	5dc7      	ldrb	r7, [r0, r7]
 800416c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004170:	4637      	mov	r7, r6
 8004172:	42bb      	cmp	r3, r7
 8004174:	460e      	mov	r6, r1
 8004176:	d9f4      	bls.n	8004162 <_printf_i+0x11a>
 8004178:	2b08      	cmp	r3, #8
 800417a:	d10b      	bne.n	8004194 <_printf_i+0x14c>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	07de      	lsls	r6, r3, #31
 8004180:	d508      	bpl.n	8004194 <_printf_i+0x14c>
 8004182:	6923      	ldr	r3, [r4, #16]
 8004184:	6861      	ldr	r1, [r4, #4]
 8004186:	4299      	cmp	r1, r3
 8004188:	bfde      	ittt	le
 800418a:	2330      	movle	r3, #48	; 0x30
 800418c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004190:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004194:	1b52      	subs	r2, r2, r5
 8004196:	6122      	str	r2, [r4, #16]
 8004198:	f8cd a000 	str.w	sl, [sp]
 800419c:	464b      	mov	r3, r9
 800419e:	aa03      	add	r2, sp, #12
 80041a0:	4621      	mov	r1, r4
 80041a2:	4640      	mov	r0, r8
 80041a4:	f7ff fee2 	bl	8003f6c <_printf_common>
 80041a8:	3001      	adds	r0, #1
 80041aa:	d14c      	bne.n	8004246 <_printf_i+0x1fe>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	b004      	add	sp, #16
 80041b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b6:	4835      	ldr	r0, [pc, #212]	; (800428c <_printf_i+0x244>)
 80041b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041bc:	6829      	ldr	r1, [r5, #0]
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80041c4:	6029      	str	r1, [r5, #0]
 80041c6:	061d      	lsls	r5, r3, #24
 80041c8:	d514      	bpl.n	80041f4 <_printf_i+0x1ac>
 80041ca:	07df      	lsls	r7, r3, #31
 80041cc:	bf44      	itt	mi
 80041ce:	f043 0320 	orrmi.w	r3, r3, #32
 80041d2:	6023      	strmi	r3, [r4, #0]
 80041d4:	b91e      	cbnz	r6, 80041de <_printf_i+0x196>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	f023 0320 	bic.w	r3, r3, #32
 80041dc:	6023      	str	r3, [r4, #0]
 80041de:	2310      	movs	r3, #16
 80041e0:	e7b0      	b.n	8004144 <_printf_i+0xfc>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	f043 0320 	orr.w	r3, r3, #32
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	2378      	movs	r3, #120	; 0x78
 80041ec:	4828      	ldr	r0, [pc, #160]	; (8004290 <_printf_i+0x248>)
 80041ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041f2:	e7e3      	b.n	80041bc <_printf_i+0x174>
 80041f4:	0659      	lsls	r1, r3, #25
 80041f6:	bf48      	it	mi
 80041f8:	b2b6      	uxthmi	r6, r6
 80041fa:	e7e6      	b.n	80041ca <_printf_i+0x182>
 80041fc:	4615      	mov	r5, r2
 80041fe:	e7bb      	b.n	8004178 <_printf_i+0x130>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	6826      	ldr	r6, [r4, #0]
 8004204:	6961      	ldr	r1, [r4, #20]
 8004206:	1d18      	adds	r0, r3, #4
 8004208:	6028      	str	r0, [r5, #0]
 800420a:	0635      	lsls	r5, r6, #24
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	d501      	bpl.n	8004214 <_printf_i+0x1cc>
 8004210:	6019      	str	r1, [r3, #0]
 8004212:	e002      	b.n	800421a <_printf_i+0x1d2>
 8004214:	0670      	lsls	r0, r6, #25
 8004216:	d5fb      	bpl.n	8004210 <_printf_i+0x1c8>
 8004218:	8019      	strh	r1, [r3, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	6123      	str	r3, [r4, #16]
 800421e:	4615      	mov	r5, r2
 8004220:	e7ba      	b.n	8004198 <_printf_i+0x150>
 8004222:	682b      	ldr	r3, [r5, #0]
 8004224:	1d1a      	adds	r2, r3, #4
 8004226:	602a      	str	r2, [r5, #0]
 8004228:	681d      	ldr	r5, [r3, #0]
 800422a:	6862      	ldr	r2, [r4, #4]
 800422c:	2100      	movs	r1, #0
 800422e:	4628      	mov	r0, r5
 8004230:	f7fb ffde 	bl	80001f0 <memchr>
 8004234:	b108      	cbz	r0, 800423a <_printf_i+0x1f2>
 8004236:	1b40      	subs	r0, r0, r5
 8004238:	6060      	str	r0, [r4, #4]
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	2300      	movs	r3, #0
 8004240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004244:	e7a8      	b.n	8004198 <_printf_i+0x150>
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	462a      	mov	r2, r5
 800424a:	4649      	mov	r1, r9
 800424c:	4640      	mov	r0, r8
 800424e:	47d0      	blx	sl
 8004250:	3001      	adds	r0, #1
 8004252:	d0ab      	beq.n	80041ac <_printf_i+0x164>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	079b      	lsls	r3, r3, #30
 8004258:	d413      	bmi.n	8004282 <_printf_i+0x23a>
 800425a:	68e0      	ldr	r0, [r4, #12]
 800425c:	9b03      	ldr	r3, [sp, #12]
 800425e:	4298      	cmp	r0, r3
 8004260:	bfb8      	it	lt
 8004262:	4618      	movlt	r0, r3
 8004264:	e7a4      	b.n	80041b0 <_printf_i+0x168>
 8004266:	2301      	movs	r3, #1
 8004268:	4632      	mov	r2, r6
 800426a:	4649      	mov	r1, r9
 800426c:	4640      	mov	r0, r8
 800426e:	47d0      	blx	sl
 8004270:	3001      	adds	r0, #1
 8004272:	d09b      	beq.n	80041ac <_printf_i+0x164>
 8004274:	3501      	adds	r5, #1
 8004276:	68e3      	ldr	r3, [r4, #12]
 8004278:	9903      	ldr	r1, [sp, #12]
 800427a:	1a5b      	subs	r3, r3, r1
 800427c:	42ab      	cmp	r3, r5
 800427e:	dcf2      	bgt.n	8004266 <_printf_i+0x21e>
 8004280:	e7eb      	b.n	800425a <_printf_i+0x212>
 8004282:	2500      	movs	r5, #0
 8004284:	f104 0619 	add.w	r6, r4, #25
 8004288:	e7f5      	b.n	8004276 <_printf_i+0x22e>
 800428a:	bf00      	nop
 800428c:	08004615 	.word	0x08004615
 8004290:	08004626 	.word	0x08004626

08004294 <memcpy>:
 8004294:	440a      	add	r2, r1
 8004296:	4291      	cmp	r1, r2
 8004298:	f100 33ff 	add.w	r3, r0, #4294967295
 800429c:	d100      	bne.n	80042a0 <memcpy+0xc>
 800429e:	4770      	bx	lr
 80042a0:	b510      	push	{r4, lr}
 80042a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042aa:	4291      	cmp	r1, r2
 80042ac:	d1f9      	bne.n	80042a2 <memcpy+0xe>
 80042ae:	bd10      	pop	{r4, pc}

080042b0 <memmove>:
 80042b0:	4288      	cmp	r0, r1
 80042b2:	b510      	push	{r4, lr}
 80042b4:	eb01 0402 	add.w	r4, r1, r2
 80042b8:	d902      	bls.n	80042c0 <memmove+0x10>
 80042ba:	4284      	cmp	r4, r0
 80042bc:	4623      	mov	r3, r4
 80042be:	d807      	bhi.n	80042d0 <memmove+0x20>
 80042c0:	1e43      	subs	r3, r0, #1
 80042c2:	42a1      	cmp	r1, r4
 80042c4:	d008      	beq.n	80042d8 <memmove+0x28>
 80042c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ce:	e7f8      	b.n	80042c2 <memmove+0x12>
 80042d0:	4402      	add	r2, r0
 80042d2:	4601      	mov	r1, r0
 80042d4:	428a      	cmp	r2, r1
 80042d6:	d100      	bne.n	80042da <memmove+0x2a>
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042e2:	e7f7      	b.n	80042d4 <memmove+0x24>

080042e4 <_free_r>:
 80042e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042e6:	2900      	cmp	r1, #0
 80042e8:	d044      	beq.n	8004374 <_free_r+0x90>
 80042ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ee:	9001      	str	r0, [sp, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f1a1 0404 	sub.w	r4, r1, #4
 80042f6:	bfb8      	it	lt
 80042f8:	18e4      	addlt	r4, r4, r3
 80042fa:	f000 f913 	bl	8004524 <__malloc_lock>
 80042fe:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <_free_r+0x94>)
 8004300:	9801      	ldr	r0, [sp, #4]
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	b933      	cbnz	r3, 8004314 <_free_r+0x30>
 8004306:	6063      	str	r3, [r4, #4]
 8004308:	6014      	str	r4, [r2, #0]
 800430a:	b003      	add	sp, #12
 800430c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004310:	f000 b90e 	b.w	8004530 <__malloc_unlock>
 8004314:	42a3      	cmp	r3, r4
 8004316:	d908      	bls.n	800432a <_free_r+0x46>
 8004318:	6825      	ldr	r5, [r4, #0]
 800431a:	1961      	adds	r1, r4, r5
 800431c:	428b      	cmp	r3, r1
 800431e:	bf01      	itttt	eq
 8004320:	6819      	ldreq	r1, [r3, #0]
 8004322:	685b      	ldreq	r3, [r3, #4]
 8004324:	1949      	addeq	r1, r1, r5
 8004326:	6021      	streq	r1, [r4, #0]
 8004328:	e7ed      	b.n	8004306 <_free_r+0x22>
 800432a:	461a      	mov	r2, r3
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b10b      	cbz	r3, 8004334 <_free_r+0x50>
 8004330:	42a3      	cmp	r3, r4
 8004332:	d9fa      	bls.n	800432a <_free_r+0x46>
 8004334:	6811      	ldr	r1, [r2, #0]
 8004336:	1855      	adds	r5, r2, r1
 8004338:	42a5      	cmp	r5, r4
 800433a:	d10b      	bne.n	8004354 <_free_r+0x70>
 800433c:	6824      	ldr	r4, [r4, #0]
 800433e:	4421      	add	r1, r4
 8004340:	1854      	adds	r4, r2, r1
 8004342:	42a3      	cmp	r3, r4
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	d1e0      	bne.n	800430a <_free_r+0x26>
 8004348:	681c      	ldr	r4, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	6053      	str	r3, [r2, #4]
 800434e:	4421      	add	r1, r4
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	e7da      	b.n	800430a <_free_r+0x26>
 8004354:	d902      	bls.n	800435c <_free_r+0x78>
 8004356:	230c      	movs	r3, #12
 8004358:	6003      	str	r3, [r0, #0]
 800435a:	e7d6      	b.n	800430a <_free_r+0x26>
 800435c:	6825      	ldr	r5, [r4, #0]
 800435e:	1961      	adds	r1, r4, r5
 8004360:	428b      	cmp	r3, r1
 8004362:	bf04      	itt	eq
 8004364:	6819      	ldreq	r1, [r3, #0]
 8004366:	685b      	ldreq	r3, [r3, #4]
 8004368:	6063      	str	r3, [r4, #4]
 800436a:	bf04      	itt	eq
 800436c:	1949      	addeq	r1, r1, r5
 800436e:	6021      	streq	r1, [r4, #0]
 8004370:	6054      	str	r4, [r2, #4]
 8004372:	e7ca      	b.n	800430a <_free_r+0x26>
 8004374:	b003      	add	sp, #12
 8004376:	bd30      	pop	{r4, r5, pc}
 8004378:	20000294 	.word	0x20000294

0800437c <sbrk_aligned>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4e0e      	ldr	r6, [pc, #56]	; (80043b8 <sbrk_aligned+0x3c>)
 8004380:	460c      	mov	r4, r1
 8004382:	6831      	ldr	r1, [r6, #0]
 8004384:	4605      	mov	r5, r0
 8004386:	b911      	cbnz	r1, 800438e <sbrk_aligned+0x12>
 8004388:	f000 f8bc 	bl	8004504 <_sbrk_r>
 800438c:	6030      	str	r0, [r6, #0]
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f000 f8b7 	bl	8004504 <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d00a      	beq.n	80043b0 <sbrk_aligned+0x34>
 800439a:	1cc4      	adds	r4, r0, #3
 800439c:	f024 0403 	bic.w	r4, r4, #3
 80043a0:	42a0      	cmp	r0, r4
 80043a2:	d007      	beq.n	80043b4 <sbrk_aligned+0x38>
 80043a4:	1a21      	subs	r1, r4, r0
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 f8ac 	bl	8004504 <_sbrk_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d101      	bne.n	80043b4 <sbrk_aligned+0x38>
 80043b0:	f04f 34ff 	mov.w	r4, #4294967295
 80043b4:	4620      	mov	r0, r4
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	20000298 	.word	0x20000298

080043bc <_malloc_r>:
 80043bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c0:	1ccd      	adds	r5, r1, #3
 80043c2:	f025 0503 	bic.w	r5, r5, #3
 80043c6:	3508      	adds	r5, #8
 80043c8:	2d0c      	cmp	r5, #12
 80043ca:	bf38      	it	cc
 80043cc:	250c      	movcc	r5, #12
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	4607      	mov	r7, r0
 80043d2:	db01      	blt.n	80043d8 <_malloc_r+0x1c>
 80043d4:	42a9      	cmp	r1, r5
 80043d6:	d905      	bls.n	80043e4 <_malloc_r+0x28>
 80043d8:	230c      	movs	r3, #12
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	2600      	movs	r6, #0
 80043de:	4630      	mov	r0, r6
 80043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e4:	4e2e      	ldr	r6, [pc, #184]	; (80044a0 <_malloc_r+0xe4>)
 80043e6:	f000 f89d 	bl	8004524 <__malloc_lock>
 80043ea:	6833      	ldr	r3, [r6, #0]
 80043ec:	461c      	mov	r4, r3
 80043ee:	bb34      	cbnz	r4, 800443e <_malloc_r+0x82>
 80043f0:	4629      	mov	r1, r5
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7ff ffc2 	bl	800437c <sbrk_aligned>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	4604      	mov	r4, r0
 80043fc:	d14d      	bne.n	800449a <_malloc_r+0xde>
 80043fe:	6834      	ldr	r4, [r6, #0]
 8004400:	4626      	mov	r6, r4
 8004402:	2e00      	cmp	r6, #0
 8004404:	d140      	bne.n	8004488 <_malloc_r+0xcc>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	4631      	mov	r1, r6
 800440a:	4638      	mov	r0, r7
 800440c:	eb04 0803 	add.w	r8, r4, r3
 8004410:	f000 f878 	bl	8004504 <_sbrk_r>
 8004414:	4580      	cmp	r8, r0
 8004416:	d13a      	bne.n	800448e <_malloc_r+0xd2>
 8004418:	6821      	ldr	r1, [r4, #0]
 800441a:	3503      	adds	r5, #3
 800441c:	1a6d      	subs	r5, r5, r1
 800441e:	f025 0503 	bic.w	r5, r5, #3
 8004422:	3508      	adds	r5, #8
 8004424:	2d0c      	cmp	r5, #12
 8004426:	bf38      	it	cc
 8004428:	250c      	movcc	r5, #12
 800442a:	4629      	mov	r1, r5
 800442c:	4638      	mov	r0, r7
 800442e:	f7ff ffa5 	bl	800437c <sbrk_aligned>
 8004432:	3001      	adds	r0, #1
 8004434:	d02b      	beq.n	800448e <_malloc_r+0xd2>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	442b      	add	r3, r5
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	e00e      	b.n	800445c <_malloc_r+0xa0>
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	1b52      	subs	r2, r2, r5
 8004442:	d41e      	bmi.n	8004482 <_malloc_r+0xc6>
 8004444:	2a0b      	cmp	r2, #11
 8004446:	d916      	bls.n	8004476 <_malloc_r+0xba>
 8004448:	1961      	adds	r1, r4, r5
 800444a:	42a3      	cmp	r3, r4
 800444c:	6025      	str	r5, [r4, #0]
 800444e:	bf18      	it	ne
 8004450:	6059      	strne	r1, [r3, #4]
 8004452:	6863      	ldr	r3, [r4, #4]
 8004454:	bf08      	it	eq
 8004456:	6031      	streq	r1, [r6, #0]
 8004458:	5162      	str	r2, [r4, r5]
 800445a:	604b      	str	r3, [r1, #4]
 800445c:	4638      	mov	r0, r7
 800445e:	f104 060b 	add.w	r6, r4, #11
 8004462:	f000 f865 	bl	8004530 <__malloc_unlock>
 8004466:	f026 0607 	bic.w	r6, r6, #7
 800446a:	1d23      	adds	r3, r4, #4
 800446c:	1af2      	subs	r2, r6, r3
 800446e:	d0b6      	beq.n	80043de <_malloc_r+0x22>
 8004470:	1b9b      	subs	r3, r3, r6
 8004472:	50a3      	str	r3, [r4, r2]
 8004474:	e7b3      	b.n	80043de <_malloc_r+0x22>
 8004476:	6862      	ldr	r2, [r4, #4]
 8004478:	42a3      	cmp	r3, r4
 800447a:	bf0c      	ite	eq
 800447c:	6032      	streq	r2, [r6, #0]
 800447e:	605a      	strne	r2, [r3, #4]
 8004480:	e7ec      	b.n	800445c <_malloc_r+0xa0>
 8004482:	4623      	mov	r3, r4
 8004484:	6864      	ldr	r4, [r4, #4]
 8004486:	e7b2      	b.n	80043ee <_malloc_r+0x32>
 8004488:	4634      	mov	r4, r6
 800448a:	6876      	ldr	r6, [r6, #4]
 800448c:	e7b9      	b.n	8004402 <_malloc_r+0x46>
 800448e:	230c      	movs	r3, #12
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	4638      	mov	r0, r7
 8004494:	f000 f84c 	bl	8004530 <__malloc_unlock>
 8004498:	e7a1      	b.n	80043de <_malloc_r+0x22>
 800449a:	6025      	str	r5, [r4, #0]
 800449c:	e7de      	b.n	800445c <_malloc_r+0xa0>
 800449e:	bf00      	nop
 80044a0:	20000294 	.word	0x20000294

080044a4 <_realloc_r>:
 80044a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	4680      	mov	r8, r0
 80044aa:	4614      	mov	r4, r2
 80044ac:	460e      	mov	r6, r1
 80044ae:	b921      	cbnz	r1, 80044ba <_realloc_r+0x16>
 80044b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b4:	4611      	mov	r1, r2
 80044b6:	f7ff bf81 	b.w	80043bc <_malloc_r>
 80044ba:	b92a      	cbnz	r2, 80044c8 <_realloc_r+0x24>
 80044bc:	f7ff ff12 	bl	80042e4 <_free_r>
 80044c0:	4625      	mov	r5, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c8:	f000 f838 	bl	800453c <_malloc_usable_size_r>
 80044cc:	4284      	cmp	r4, r0
 80044ce:	4607      	mov	r7, r0
 80044d0:	d802      	bhi.n	80044d8 <_realloc_r+0x34>
 80044d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044d6:	d812      	bhi.n	80044fe <_realloc_r+0x5a>
 80044d8:	4621      	mov	r1, r4
 80044da:	4640      	mov	r0, r8
 80044dc:	f7ff ff6e 	bl	80043bc <_malloc_r>
 80044e0:	4605      	mov	r5, r0
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0ed      	beq.n	80044c2 <_realloc_r+0x1e>
 80044e6:	42bc      	cmp	r4, r7
 80044e8:	4622      	mov	r2, r4
 80044ea:	4631      	mov	r1, r6
 80044ec:	bf28      	it	cs
 80044ee:	463a      	movcs	r2, r7
 80044f0:	f7ff fed0 	bl	8004294 <memcpy>
 80044f4:	4631      	mov	r1, r6
 80044f6:	4640      	mov	r0, r8
 80044f8:	f7ff fef4 	bl	80042e4 <_free_r>
 80044fc:	e7e1      	b.n	80044c2 <_realloc_r+0x1e>
 80044fe:	4635      	mov	r5, r6
 8004500:	e7df      	b.n	80044c2 <_realloc_r+0x1e>
	...

08004504 <_sbrk_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d06      	ldr	r5, [pc, #24]	; (8004520 <_sbrk_r+0x1c>)
 8004508:	2300      	movs	r3, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc fc38 	bl	8000d84 <_sbrk>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_sbrk_r+0x1a>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_sbrk_r+0x1a>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	2000029c 	.word	0x2000029c

08004524 <__malloc_lock>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__malloc_lock+0x8>)
 8004526:	f000 b811 	b.w	800454c <__retarget_lock_acquire_recursive>
 800452a:	bf00      	nop
 800452c:	200002a0 	.word	0x200002a0

08004530 <__malloc_unlock>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__malloc_unlock+0x8>)
 8004532:	f000 b80c 	b.w	800454e <__retarget_lock_release_recursive>
 8004536:	bf00      	nop
 8004538:	200002a0 	.word	0x200002a0

0800453c <_malloc_usable_size_r>:
 800453c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004540:	1f18      	subs	r0, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfbc      	itt	lt
 8004546:	580b      	ldrlt	r3, [r1, r0]
 8004548:	18c0      	addlt	r0, r0, r3
 800454a:	4770      	bx	lr

0800454c <__retarget_lock_acquire_recursive>:
 800454c:	4770      	bx	lr

0800454e <__retarget_lock_release_recursive>:
 800454e:	4770      	bx	lr

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
